// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AxiBurst_HH_
#define _AxiBurst_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CheckPartition.h"
#include "AxiBurst_buff.h"
#include "AxiBurst_sqrt_s_axi.h"
#include "AxiBurst_output_r_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_OUTPUT_R_ID_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_DATA_WIDTH = 32,
         unsigned int C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_SQRT_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_SQRT_DATA_WIDTH = 32>
struct AxiBurst : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_output_r_AWVALID;
    sc_in< sc_logic > m_axi_output_r_AWREADY;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ADDR_WIDTH> > m_axi_output_r_AWADDR;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_AWID;
    sc_out< sc_lv<8> > m_axi_output_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_output_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_output_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_output_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_output_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_output_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_output_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_output_r_AWREGION;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_AWUSER_WIDTH> > m_axi_output_r_AWUSER;
    sc_out< sc_logic > m_axi_output_r_WVALID;
    sc_in< sc_logic > m_axi_output_r_WREADY;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_DATA_WIDTH> > m_axi_output_r_WDATA;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_DATA_WIDTH/8> > m_axi_output_r_WSTRB;
    sc_out< sc_logic > m_axi_output_r_WLAST;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_WID;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_WUSER_WIDTH> > m_axi_output_r_WUSER;
    sc_out< sc_logic > m_axi_output_r_ARVALID;
    sc_in< sc_logic > m_axi_output_r_ARREADY;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ADDR_WIDTH> > m_axi_output_r_ARADDR;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_ARID;
    sc_out< sc_lv<8> > m_axi_output_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_output_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_output_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_output_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_output_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_output_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_output_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_output_r_ARREGION;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ARUSER_WIDTH> > m_axi_output_r_ARUSER;
    sc_in< sc_logic > m_axi_output_r_RVALID;
    sc_out< sc_logic > m_axi_output_r_RREADY;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_DATA_WIDTH> > m_axi_output_r_RDATA;
    sc_in< sc_logic > m_axi_output_r_RLAST;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_RID;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_RUSER_WIDTH> > m_axi_output_r_RUSER;
    sc_in< sc_lv<2> > m_axi_output_r_RRESP;
    sc_in< sc_logic > m_axi_output_r_BVALID;
    sc_out< sc_logic > m_axi_output_r_BREADY;
    sc_in< sc_lv<2> > m_axi_output_r_BRESP;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_BID;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_BUSER_WIDTH> > m_axi_output_r_BUSER;
    sc_in< sc_logic > s_axi_sqrt_AWVALID;
    sc_out< sc_logic > s_axi_sqrt_AWREADY;
    sc_in< sc_uint<C_S_AXI_SQRT_ADDR_WIDTH> > s_axi_sqrt_AWADDR;
    sc_in< sc_logic > s_axi_sqrt_WVALID;
    sc_out< sc_logic > s_axi_sqrt_WREADY;
    sc_in< sc_uint<C_S_AXI_SQRT_DATA_WIDTH> > s_axi_sqrt_WDATA;
    sc_in< sc_uint<C_S_AXI_SQRT_DATA_WIDTH/8> > s_axi_sqrt_WSTRB;
    sc_in< sc_logic > s_axi_sqrt_ARVALID;
    sc_out< sc_logic > s_axi_sqrt_ARREADY;
    sc_in< sc_uint<C_S_AXI_SQRT_ADDR_WIDTH> > s_axi_sqrt_ARADDR;
    sc_out< sc_logic > s_axi_sqrt_RVALID;
    sc_in< sc_logic > s_axi_sqrt_RREADY;
    sc_out< sc_uint<C_S_AXI_SQRT_DATA_WIDTH> > s_axi_sqrt_RDATA;
    sc_out< sc_lv<2> > s_axi_sqrt_RRESP;
    sc_out< sc_logic > s_axi_sqrt_BVALID;
    sc_in< sc_logic > s_axi_sqrt_BREADY;
    sc_out< sc_lv<2> > s_axi_sqrt_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;


    // Module declarations
    AxiBurst(sc_module_name name);
    SC_HAS_PROCESS(AxiBurst);

    ~AxiBurst();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    AxiBurst_sqrt_s_axi<C_S_AXI_SQRT_ADDR_WIDTH,C_S_AXI_SQRT_DATA_WIDTH>* AxiBurst_sqrt_s_axi_U;
    AxiBurst_output_r_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_OUTPUT_R_ID_WIDTH,C_M_AXI_OUTPUT_R_ADDR_WIDTH,C_M_AXI_OUTPUT_R_DATA_WIDTH,C_M_AXI_OUTPUT_R_AWUSER_WIDTH,C_M_AXI_OUTPUT_R_ARUSER_WIDTH,C_M_AXI_OUTPUT_R_WUSER_WIDTH,C_M_AXI_OUTPUT_R_RUSER_WIDTH,C_M_AXI_OUTPUT_R_BUSER_WIDTH,C_M_AXI_OUTPUT_R_USER_VALUE,C_M_AXI_OUTPUT_R_PROT_VALUE,C_M_AXI_OUTPUT_R_CACHE_VALUE>* AxiBurst_output_r_m_axi_U;
    AxiBurst_buff* buff_U;
    CheckPartition* grp_CheckPartition_fu_163;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<26> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > array_r;
    sc_signal< sc_lv<32> > ap_return;
    sc_signal< sc_logic > output_r_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > output_r_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln20_reg_240;
    sc_signal< sc_logic > output_r_AWREADY;
    sc_signal< sc_logic > output_r_WREADY;
    sc_signal< sc_logic > output_r_ARVALID;
    sc_signal< sc_logic > output_r_ARREADY;
    sc_signal< sc_lv<32> > output_r_ARADDR;
    sc_signal< sc_logic > output_r_RVALID;
    sc_signal< sc_logic > output_r_RREADY;
    sc_signal< sc_lv<32> > output_r_RDATA;
    sc_signal< sc_logic > output_r_RLAST;
    sc_signal< sc_lv<1> > output_r_RID;
    sc_signal< sc_lv<1> > output_r_RUSER;
    sc_signal< sc_lv<2> > output_r_RRESP;
    sc_signal< sc_logic > output_r_BVALID;
    sc_signal< sc_lv<2> > output_r_BRESP;
    sc_signal< sc_lv<1> > output_r_BID;
    sc_signal< sc_lv<1> > output_r_BUSER;
    sc_signal< sc_lv<5> > phi_ln20_reg_126;
    sc_signal< sc_lv<5> > phi_ln20_reg_126_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<25> > solution_reg_138;
    sc_signal< sc_lv<30> > array1_reg_229;
    sc_signal< sc_lv<1> > icmp_ln20_fu_190_p2;
    sc_signal< sc_lv<1> > icmp_ln20_reg_240_pp0_iter1_reg;
    sc_signal< sc_lv<5> > add_ln20_fu_196_p2;
    sc_signal< sc_lv<5> > add_ln20_reg_244;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > output_addr_read_reg_249;
    sc_signal< sc_lv<1> > tmp_23_fu_207_p3;
    sc_signal< sc_lv<1> > tmp_23_reg_254;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state28_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > grp_CheckPartition_fu_163_ap_return;
    sc_signal< sc_lv<1> > tmp_1_reg_258;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage14;
    sc_signal< bool > ap_block_state27_pp1_stage14_iter0;
    sc_signal< bool > ap_block_pp1_stage14_11001;
    sc_signal< sc_lv<25> > i_fu_215_p2;
    sc_signal< sc_lv<25> > i_reg_262;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< bool > ap_block_pp1_stage14_subdone;
    sc_signal< bool > ap_predicate_tran28to29_state27;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_lv<7> > buff_address0;
    sc_signal< sc_logic > buff_ce0;
    sc_signal< sc_logic > buff_we0;
    sc_signal< sc_lv<32> > buff_q0;
    sc_signal< sc_logic > buff_ce1;
    sc_signal< sc_lv<32> > buff_q1;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_ap_start;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_ap_done;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_ap_idle;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_ap_ready;
    sc_signal< sc_lv<7> > grp_CheckPartition_fu_163_array_r_address0;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_array_r_ce0;
    sc_signal< sc_lv<7> > grp_CheckPartition_fu_163_array_r_address1;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_array_r_ce1;
    sc_signal< sc_lv<5> > ap_phi_mux_phi_ln20_phi_fu_130_p4;
    sc_signal< sc_lv<25> > ap_phi_mux_solution_phi_fu_142_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<4> > p_0_reg_150;
    sc_signal< sc_logic > grp_CheckPartition_fu_163_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage2;
    sc_signal< bool > ap_block_pp1_stage2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage3;
    sc_signal< bool > ap_block_pp1_stage3;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage4;
    sc_signal< bool > ap_block_pp1_stage4;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage5;
    sc_signal< bool > ap_block_pp1_stage5;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage6;
    sc_signal< bool > ap_block_pp1_stage6;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage7;
    sc_signal< bool > ap_block_pp1_stage7;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage8;
    sc_signal< bool > ap_block_pp1_stage8;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage9;
    sc_signal< bool > ap_block_pp1_stage9;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage10;
    sc_signal< bool > ap_block_pp1_stage10;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage11;
    sc_signal< bool > ap_block_pp1_stage11;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage12;
    sc_signal< bool > ap_block_pp1_stage12;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage13;
    sc_signal< bool > ap_block_pp1_stage13;
    sc_signal< bool > ap_block_pp1_stage14;
    sc_signal< sc_lv<64> > zext_ln20_fu_202_p1;
    sc_signal< sc_lv<64> > empty_fu_180_p1;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_lv<5> > sext_ln48_fu_221_p1;
    sc_signal< sc_lv<26> > ap_NS_fsm;
    sc_signal< bool > ap_block_state14_pp1_stage1_iter0;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< bool > ap_block_state15_pp1_stage2_iter0;
    sc_signal< bool > ap_block_pp1_stage2_subdone;
    sc_signal< bool > ap_block_pp1_stage2_11001;
    sc_signal< bool > ap_block_state16_pp1_stage3_iter0;
    sc_signal< bool > ap_block_pp1_stage3_subdone;
    sc_signal< bool > ap_block_pp1_stage3_11001;
    sc_signal< bool > ap_block_state17_pp1_stage4_iter0;
    sc_signal< bool > ap_block_pp1_stage4_subdone;
    sc_signal< bool > ap_block_pp1_stage4_11001;
    sc_signal< bool > ap_block_state18_pp1_stage5_iter0;
    sc_signal< bool > ap_block_pp1_stage5_subdone;
    sc_signal< bool > ap_block_pp1_stage5_11001;
    sc_signal< bool > ap_block_state19_pp1_stage6_iter0;
    sc_signal< bool > ap_block_pp1_stage6_subdone;
    sc_signal< bool > ap_block_pp1_stage6_11001;
    sc_signal< bool > ap_block_state20_pp1_stage7_iter0;
    sc_signal< bool > ap_block_pp1_stage7_subdone;
    sc_signal< bool > ap_block_pp1_stage7_11001;
    sc_signal< bool > ap_block_state21_pp1_stage8_iter0;
    sc_signal< bool > ap_block_pp1_stage8_subdone;
    sc_signal< bool > ap_block_pp1_stage8_11001;
    sc_signal< bool > ap_block_state22_pp1_stage9_iter0;
    sc_signal< bool > ap_block_pp1_stage9_subdone;
    sc_signal< bool > ap_block_pp1_stage9_11001;
    sc_signal< bool > ap_block_state23_pp1_stage10_iter0;
    sc_signal< bool > ap_block_pp1_stage10_subdone;
    sc_signal< bool > ap_block_pp1_stage10_11001;
    sc_signal< bool > ap_block_state24_pp1_stage11_iter0;
    sc_signal< bool > ap_block_pp1_stage11_subdone;
    sc_signal< bool > ap_block_pp1_stage11_11001;
    sc_signal< bool > ap_block_state25_pp1_stage12_iter0;
    sc_signal< bool > ap_block_pp1_stage12_subdone;
    sc_signal< bool > ap_block_pp1_stage12_11001;
    sc_signal< bool > ap_block_state26_pp1_stage13_iter0;
    sc_signal< bool > ap_block_pp1_stage13_subdone;
    sc_signal< bool > ap_block_pp1_stage13_11001;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< bool > ap_condition_800;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<26> ap_ST_fsm_state1;
    static const sc_lv<26> ap_ST_fsm_state2;
    static const sc_lv<26> ap_ST_fsm_state3;
    static const sc_lv<26> ap_ST_fsm_state4;
    static const sc_lv<26> ap_ST_fsm_state5;
    static const sc_lv<26> ap_ST_fsm_state6;
    static const sc_lv<26> ap_ST_fsm_state7;
    static const sc_lv<26> ap_ST_fsm_state8;
    static const sc_lv<26> ap_ST_fsm_pp0_stage0;
    static const sc_lv<26> ap_ST_fsm_state12;
    static const sc_lv<26> ap_ST_fsm_pp1_stage0;
    static const sc_lv<26> ap_ST_fsm_pp1_stage1;
    static const sc_lv<26> ap_ST_fsm_pp1_stage2;
    static const sc_lv<26> ap_ST_fsm_pp1_stage3;
    static const sc_lv<26> ap_ST_fsm_pp1_stage4;
    static const sc_lv<26> ap_ST_fsm_pp1_stage5;
    static const sc_lv<26> ap_ST_fsm_pp1_stage6;
    static const sc_lv<26> ap_ST_fsm_pp1_stage7;
    static const sc_lv<26> ap_ST_fsm_pp1_stage8;
    static const sc_lv<26> ap_ST_fsm_pp1_stage9;
    static const sc_lv<26> ap_ST_fsm_pp1_stage10;
    static const sc_lv<26> ap_ST_fsm_pp1_stage11;
    static const sc_lv<26> ap_ST_fsm_pp1_stage12;
    static const sc_lv<26> ap_ST_fsm_pp1_stage13;
    static const sc_lv<26> ap_ST_fsm_pp1_stage14;
    static const sc_lv<26> ap_ST_fsm_state29;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_OUTPUT_R_USER_VALUE;
    static const int C_M_AXI_OUTPUT_R_PROT_VALUE;
    static const int C_M_AXI_OUTPUT_R_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<25> ap_const_lv25_1;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_clk_no_reset_();
    void thread_add_ln20_fu_196_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_pp1_stage10();
    void thread_ap_CS_fsm_pp1_stage11();
    void thread_ap_CS_fsm_pp1_stage12();
    void thread_ap_CS_fsm_pp1_stage13();
    void thread_ap_CS_fsm_pp1_stage14();
    void thread_ap_CS_fsm_pp1_stage2();
    void thread_ap_CS_fsm_pp1_stage3();
    void thread_ap_CS_fsm_pp1_stage4();
    void thread_ap_CS_fsm_pp1_stage5();
    void thread_ap_CS_fsm_pp1_stage6();
    void thread_ap_CS_fsm_pp1_stage7();
    void thread_ap_CS_fsm_pp1_stage8();
    void thread_ap_CS_fsm_pp1_stage9();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage10();
    void thread_ap_block_pp1_stage10_11001();
    void thread_ap_block_pp1_stage10_subdone();
    void thread_ap_block_pp1_stage11();
    void thread_ap_block_pp1_stage11_11001();
    void thread_ap_block_pp1_stage11_subdone();
    void thread_ap_block_pp1_stage12();
    void thread_ap_block_pp1_stage12_11001();
    void thread_ap_block_pp1_stage12_subdone();
    void thread_ap_block_pp1_stage13();
    void thread_ap_block_pp1_stage13_11001();
    void thread_ap_block_pp1_stage13_subdone();
    void thread_ap_block_pp1_stage14();
    void thread_ap_block_pp1_stage14_11001();
    void thread_ap_block_pp1_stage14_subdone();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_pp1_stage2();
    void thread_ap_block_pp1_stage2_11001();
    void thread_ap_block_pp1_stage2_subdone();
    void thread_ap_block_pp1_stage3();
    void thread_ap_block_pp1_stage3_11001();
    void thread_ap_block_pp1_stage3_subdone();
    void thread_ap_block_pp1_stage4();
    void thread_ap_block_pp1_stage4_11001();
    void thread_ap_block_pp1_stage4_subdone();
    void thread_ap_block_pp1_stage5();
    void thread_ap_block_pp1_stage5_11001();
    void thread_ap_block_pp1_stage5_subdone();
    void thread_ap_block_pp1_stage6();
    void thread_ap_block_pp1_stage6_11001();
    void thread_ap_block_pp1_stage6_subdone();
    void thread_ap_block_pp1_stage7();
    void thread_ap_block_pp1_stage7_11001();
    void thread_ap_block_pp1_stage7_subdone();
    void thread_ap_block_pp1_stage8();
    void thread_ap_block_pp1_stage8_11001();
    void thread_ap_block_pp1_stage8_subdone();
    void thread_ap_block_pp1_stage9();
    void thread_ap_block_pp1_stage9_11001();
    void thread_ap_block_pp1_stage9_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state13_pp1_stage0_iter0();
    void thread_ap_block_state14_pp1_stage1_iter0();
    void thread_ap_block_state15_pp1_stage2_iter0();
    void thread_ap_block_state16_pp1_stage3_iter0();
    void thread_ap_block_state17_pp1_stage4_iter0();
    void thread_ap_block_state18_pp1_stage5_iter0();
    void thread_ap_block_state19_pp1_stage6_iter0();
    void thread_ap_block_state20_pp1_stage7_iter0();
    void thread_ap_block_state21_pp1_stage8_iter0();
    void thread_ap_block_state22_pp1_stage9_iter0();
    void thread_ap_block_state23_pp1_stage10_iter0();
    void thread_ap_block_state24_pp1_stage11_iter0();
    void thread_ap_block_state25_pp1_stage12_iter0();
    void thread_ap_block_state26_pp1_stage13_iter0();
    void thread_ap_block_state27_pp1_stage14_iter0();
    void thread_ap_block_state28_pp1_stage0_iter1();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_800();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_phi_ln20_phi_fu_130_p4();
    void thread_ap_phi_mux_solution_phi_fu_142_p4();
    void thread_ap_predicate_tran28to29_state27();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_buff_address0();
    void thread_buff_ce0();
    void thread_buff_ce1();
    void thread_buff_we0();
    void thread_empty_fu_180_p1();
    void thread_grp_CheckPartition_fu_163_ap_start();
    void thread_i_fu_215_p2();
    void thread_icmp_ln20_fu_190_p2();
    void thread_output_r_ARADDR();
    void thread_output_r_ARVALID();
    void thread_output_r_RREADY();
    void thread_output_r_blk_n_AR();
    void thread_output_r_blk_n_R();
    void thread_sext_ln48_fu_221_p1();
    void thread_tmp_23_fu_207_p3();
    void thread_zext_ln20_fu_202_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
