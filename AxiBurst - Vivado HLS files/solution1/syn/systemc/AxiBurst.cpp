// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AxiBurst.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AxiBurst::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AxiBurst::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> AxiBurst::ap_ST_fsm_state1 = "1";
const sc_lv<26> AxiBurst::ap_ST_fsm_state2 = "10";
const sc_lv<26> AxiBurst::ap_ST_fsm_state3 = "100";
const sc_lv<26> AxiBurst::ap_ST_fsm_state4 = "1000";
const sc_lv<26> AxiBurst::ap_ST_fsm_state5 = "10000";
const sc_lv<26> AxiBurst::ap_ST_fsm_state6 = "100000";
const sc_lv<26> AxiBurst::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_state12 = "1000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage0 = "10000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage1 = "100000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage2 = "1000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage3 = "10000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage4 = "100000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage5 = "1000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage6 = "10000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage7 = "100000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage8 = "1000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage9 = "10000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage10 = "100000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage11 = "1000000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage12 = "10000000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage13 = "100000000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_pp1_stage14 = "1000000000000000000000000";
const sc_lv<26> AxiBurst::ap_ST_fsm_state29 = "10000000000000000000000000";
const sc_lv<32> AxiBurst::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AxiBurst::ap_const_boolean_1 = true;
const sc_lv<32> AxiBurst::ap_const_lv32_1 = "1";
const sc_lv<32> AxiBurst::ap_const_lv32_8 = "1000";
const bool AxiBurst::ap_const_boolean_0 = false;
const sc_lv<1> AxiBurst::ap_const_lv1_0 = "0";
const int AxiBurst::C_S_AXI_DATA_WIDTH = "100000";
const int AxiBurst::C_M_AXI_OUTPUT_R_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int AxiBurst::C_M_AXI_OUTPUT_R_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int AxiBurst::C_M_AXI_OUTPUT_R_CACHE_VALUE = "11";
const int AxiBurst::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> AxiBurst::ap_const_lv32_A = "1010";
const sc_lv<32> AxiBurst::ap_const_lv32_18 = "11000";
const sc_lv<32> AxiBurst::ap_const_lv32_7 = "111";
const sc_lv<1> AxiBurst::ap_const_lv1_1 = "1";
const sc_lv<32> AxiBurst::ap_const_lv32_9 = "1001";
const sc_lv<5> AxiBurst::ap_const_lv5_0 = "00000";
const sc_lv<25> AxiBurst::ap_const_lv25_1 = "1";
const sc_lv<4> AxiBurst::ap_const_lv4_E = "1110";
const sc_lv<4> AxiBurst::ap_const_lv4_9 = "1001";
const sc_lv<32> AxiBurst::ap_const_lv32_B = "1011";
const sc_lv<32> AxiBurst::ap_const_lv32_C = "1100";
const sc_lv<32> AxiBurst::ap_const_lv32_D = "1101";
const sc_lv<32> AxiBurst::ap_const_lv32_E = "1110";
const sc_lv<32> AxiBurst::ap_const_lv32_F = "1111";
const sc_lv<32> AxiBurst::ap_const_lv32_10 = "10000";
const sc_lv<32> AxiBurst::ap_const_lv32_11 = "10001";
const sc_lv<32> AxiBurst::ap_const_lv32_12 = "10010";
const sc_lv<32> AxiBurst::ap_const_lv32_13 = "10011";
const sc_lv<32> AxiBurst::ap_const_lv32_14 = "10100";
const sc_lv<32> AxiBurst::ap_const_lv32_15 = "10101";
const sc_lv<32> AxiBurst::ap_const_lv32_16 = "10110";
const sc_lv<32> AxiBurst::ap_const_lv32_17 = "10111";
const sc_lv<32> AxiBurst::ap_const_lv32_19 = "11001";
const sc_lv<3> AxiBurst::ap_const_lv3_0 = "000";
const sc_lv<2> AxiBurst::ap_const_lv2_0 = "00";
const sc_lv<4> AxiBurst::ap_const_lv4_0 = "0000";
const sc_lv<32> AxiBurst::ap_const_lv32_2 = "10";
const sc_lv<32> AxiBurst::ap_const_lv32_1F = "11111";
const sc_lv<5> AxiBurst::ap_const_lv5_19 = "11001";
const sc_lv<5> AxiBurst::ap_const_lv5_1 = "1";

AxiBurst::AxiBurst(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AxiBurst_sqrt_s_axi_U = new AxiBurst_sqrt_s_axi<C_S_AXI_SQRT_ADDR_WIDTH,C_S_AXI_SQRT_DATA_WIDTH>("AxiBurst_sqrt_s_axi_U");
    AxiBurst_sqrt_s_axi_U->AWVALID(s_axi_sqrt_AWVALID);
    AxiBurst_sqrt_s_axi_U->AWREADY(s_axi_sqrt_AWREADY);
    AxiBurst_sqrt_s_axi_U->AWADDR(s_axi_sqrt_AWADDR);
    AxiBurst_sqrt_s_axi_U->WVALID(s_axi_sqrt_WVALID);
    AxiBurst_sqrt_s_axi_U->WREADY(s_axi_sqrt_WREADY);
    AxiBurst_sqrt_s_axi_U->WDATA(s_axi_sqrt_WDATA);
    AxiBurst_sqrt_s_axi_U->WSTRB(s_axi_sqrt_WSTRB);
    AxiBurst_sqrt_s_axi_U->ARVALID(s_axi_sqrt_ARVALID);
    AxiBurst_sqrt_s_axi_U->ARREADY(s_axi_sqrt_ARREADY);
    AxiBurst_sqrt_s_axi_U->ARADDR(s_axi_sqrt_ARADDR);
    AxiBurst_sqrt_s_axi_U->RVALID(s_axi_sqrt_RVALID);
    AxiBurst_sqrt_s_axi_U->RREADY(s_axi_sqrt_RREADY);
    AxiBurst_sqrt_s_axi_U->RDATA(s_axi_sqrt_RDATA);
    AxiBurst_sqrt_s_axi_U->RRESP(s_axi_sqrt_RRESP);
    AxiBurst_sqrt_s_axi_U->BVALID(s_axi_sqrt_BVALID);
    AxiBurst_sqrt_s_axi_U->BREADY(s_axi_sqrt_BREADY);
    AxiBurst_sqrt_s_axi_U->BRESP(s_axi_sqrt_BRESP);
    AxiBurst_sqrt_s_axi_U->ACLK(ap_clk);
    AxiBurst_sqrt_s_axi_U->ARESET(ap_rst_n_inv);
    AxiBurst_sqrt_s_axi_U->ACLK_EN(ap_var_for_const0);
    AxiBurst_sqrt_s_axi_U->ap_start(ap_start);
    AxiBurst_sqrt_s_axi_U->interrupt(interrupt);
    AxiBurst_sqrt_s_axi_U->ap_ready(ap_ready);
    AxiBurst_sqrt_s_axi_U->ap_done(ap_done);
    AxiBurst_sqrt_s_axi_U->ap_idle(ap_idle);
    AxiBurst_sqrt_s_axi_U->ap_return(ap_return);
    AxiBurst_sqrt_s_axi_U->array_r(array_r);
    AxiBurst_output_r_m_axi_U = new AxiBurst_output_r_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_OUTPUT_R_ID_WIDTH,C_M_AXI_OUTPUT_R_ADDR_WIDTH,C_M_AXI_OUTPUT_R_DATA_WIDTH,C_M_AXI_OUTPUT_R_AWUSER_WIDTH,C_M_AXI_OUTPUT_R_ARUSER_WIDTH,C_M_AXI_OUTPUT_R_WUSER_WIDTH,C_M_AXI_OUTPUT_R_RUSER_WIDTH,C_M_AXI_OUTPUT_R_BUSER_WIDTH,C_M_AXI_OUTPUT_R_USER_VALUE,C_M_AXI_OUTPUT_R_PROT_VALUE,C_M_AXI_OUTPUT_R_CACHE_VALUE>("AxiBurst_output_r_m_axi_U");
    AxiBurst_output_r_m_axi_U->AWVALID(m_axi_output_r_AWVALID);
    AxiBurst_output_r_m_axi_U->AWREADY(m_axi_output_r_AWREADY);
    AxiBurst_output_r_m_axi_U->AWADDR(m_axi_output_r_AWADDR);
    AxiBurst_output_r_m_axi_U->AWID(m_axi_output_r_AWID);
    AxiBurst_output_r_m_axi_U->AWLEN(m_axi_output_r_AWLEN);
    AxiBurst_output_r_m_axi_U->AWSIZE(m_axi_output_r_AWSIZE);
    AxiBurst_output_r_m_axi_U->AWBURST(m_axi_output_r_AWBURST);
    AxiBurst_output_r_m_axi_U->AWLOCK(m_axi_output_r_AWLOCK);
    AxiBurst_output_r_m_axi_U->AWCACHE(m_axi_output_r_AWCACHE);
    AxiBurst_output_r_m_axi_U->AWPROT(m_axi_output_r_AWPROT);
    AxiBurst_output_r_m_axi_U->AWQOS(m_axi_output_r_AWQOS);
    AxiBurst_output_r_m_axi_U->AWREGION(m_axi_output_r_AWREGION);
    AxiBurst_output_r_m_axi_U->AWUSER(m_axi_output_r_AWUSER);
    AxiBurst_output_r_m_axi_U->WVALID(m_axi_output_r_WVALID);
    AxiBurst_output_r_m_axi_U->WREADY(m_axi_output_r_WREADY);
    AxiBurst_output_r_m_axi_U->WDATA(m_axi_output_r_WDATA);
    AxiBurst_output_r_m_axi_U->WSTRB(m_axi_output_r_WSTRB);
    AxiBurst_output_r_m_axi_U->WLAST(m_axi_output_r_WLAST);
    AxiBurst_output_r_m_axi_U->WID(m_axi_output_r_WID);
    AxiBurst_output_r_m_axi_U->WUSER(m_axi_output_r_WUSER);
    AxiBurst_output_r_m_axi_U->ARVALID(m_axi_output_r_ARVALID);
    AxiBurst_output_r_m_axi_U->ARREADY(m_axi_output_r_ARREADY);
    AxiBurst_output_r_m_axi_U->ARADDR(m_axi_output_r_ARADDR);
    AxiBurst_output_r_m_axi_U->ARID(m_axi_output_r_ARID);
    AxiBurst_output_r_m_axi_U->ARLEN(m_axi_output_r_ARLEN);
    AxiBurst_output_r_m_axi_U->ARSIZE(m_axi_output_r_ARSIZE);
    AxiBurst_output_r_m_axi_U->ARBURST(m_axi_output_r_ARBURST);
    AxiBurst_output_r_m_axi_U->ARLOCK(m_axi_output_r_ARLOCK);
    AxiBurst_output_r_m_axi_U->ARCACHE(m_axi_output_r_ARCACHE);
    AxiBurst_output_r_m_axi_U->ARPROT(m_axi_output_r_ARPROT);
    AxiBurst_output_r_m_axi_U->ARQOS(m_axi_output_r_ARQOS);
    AxiBurst_output_r_m_axi_U->ARREGION(m_axi_output_r_ARREGION);
    AxiBurst_output_r_m_axi_U->ARUSER(m_axi_output_r_ARUSER);
    AxiBurst_output_r_m_axi_U->RVALID(m_axi_output_r_RVALID);
    AxiBurst_output_r_m_axi_U->RREADY(m_axi_output_r_RREADY);
    AxiBurst_output_r_m_axi_U->RDATA(m_axi_output_r_RDATA);
    AxiBurst_output_r_m_axi_U->RLAST(m_axi_output_r_RLAST);
    AxiBurst_output_r_m_axi_U->RID(m_axi_output_r_RID);
    AxiBurst_output_r_m_axi_U->RUSER(m_axi_output_r_RUSER);
    AxiBurst_output_r_m_axi_U->RRESP(m_axi_output_r_RRESP);
    AxiBurst_output_r_m_axi_U->BVALID(m_axi_output_r_BVALID);
    AxiBurst_output_r_m_axi_U->BREADY(m_axi_output_r_BREADY);
    AxiBurst_output_r_m_axi_U->BRESP(m_axi_output_r_BRESP);
    AxiBurst_output_r_m_axi_U->BID(m_axi_output_r_BID);
    AxiBurst_output_r_m_axi_U->BUSER(m_axi_output_r_BUSER);
    AxiBurst_output_r_m_axi_U->ACLK(ap_clk);
    AxiBurst_output_r_m_axi_U->ARESET(ap_rst_n_inv);
    AxiBurst_output_r_m_axi_U->ACLK_EN(ap_var_for_const0);
    AxiBurst_output_r_m_axi_U->I_ARVALID(output_r_ARVALID);
    AxiBurst_output_r_m_axi_U->I_ARREADY(output_r_ARREADY);
    AxiBurst_output_r_m_axi_U->I_ARADDR(output_r_ARADDR);
    AxiBurst_output_r_m_axi_U->I_ARID(ap_var_for_const1);
    AxiBurst_output_r_m_axi_U->I_ARLEN(ap_var_for_const2);
    AxiBurst_output_r_m_axi_U->I_ARSIZE(ap_var_for_const3);
    AxiBurst_output_r_m_axi_U->I_ARLOCK(ap_var_for_const4);
    AxiBurst_output_r_m_axi_U->I_ARCACHE(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_ARQOS(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_ARPROT(ap_var_for_const3);
    AxiBurst_output_r_m_axi_U->I_ARUSER(ap_var_for_const1);
    AxiBurst_output_r_m_axi_U->I_ARBURST(ap_var_for_const4);
    AxiBurst_output_r_m_axi_U->I_ARREGION(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_RVALID(output_r_RVALID);
    AxiBurst_output_r_m_axi_U->I_RREADY(output_r_RREADY);
    AxiBurst_output_r_m_axi_U->I_RDATA(output_r_RDATA);
    AxiBurst_output_r_m_axi_U->I_RID(output_r_RID);
    AxiBurst_output_r_m_axi_U->I_RUSER(output_r_RUSER);
    AxiBurst_output_r_m_axi_U->I_RRESP(output_r_RRESP);
    AxiBurst_output_r_m_axi_U->I_RLAST(output_r_RLAST);
    AxiBurst_output_r_m_axi_U->I_AWVALID(ap_var_for_const6);
    AxiBurst_output_r_m_axi_U->I_AWREADY(output_r_AWREADY);
    AxiBurst_output_r_m_axi_U->I_AWADDR(ap_var_for_const7);
    AxiBurst_output_r_m_axi_U->I_AWID(ap_var_for_const1);
    AxiBurst_output_r_m_axi_U->I_AWLEN(ap_var_for_const7);
    AxiBurst_output_r_m_axi_U->I_AWSIZE(ap_var_for_const3);
    AxiBurst_output_r_m_axi_U->I_AWLOCK(ap_var_for_const4);
    AxiBurst_output_r_m_axi_U->I_AWCACHE(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_AWQOS(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_AWPROT(ap_var_for_const3);
    AxiBurst_output_r_m_axi_U->I_AWUSER(ap_var_for_const1);
    AxiBurst_output_r_m_axi_U->I_AWBURST(ap_var_for_const4);
    AxiBurst_output_r_m_axi_U->I_AWREGION(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_WVALID(ap_var_for_const6);
    AxiBurst_output_r_m_axi_U->I_WREADY(output_r_WREADY);
    AxiBurst_output_r_m_axi_U->I_WDATA(ap_var_for_const7);
    AxiBurst_output_r_m_axi_U->I_WID(ap_var_for_const1);
    AxiBurst_output_r_m_axi_U->I_WUSER(ap_var_for_const1);
    AxiBurst_output_r_m_axi_U->I_WLAST(ap_var_for_const6);
    AxiBurst_output_r_m_axi_U->I_WSTRB(ap_var_for_const5);
    AxiBurst_output_r_m_axi_U->I_BVALID(output_r_BVALID);
    AxiBurst_output_r_m_axi_U->I_BREADY(ap_var_for_const6);
    AxiBurst_output_r_m_axi_U->I_BRESP(output_r_BRESP);
    AxiBurst_output_r_m_axi_U->I_BID(output_r_BID);
    AxiBurst_output_r_m_axi_U->I_BUSER(output_r_BUSER);
    buff_U = new AxiBurst_buff("buff_U");
    buff_U->clk(ap_clk);
    buff_U->reset(ap_rst_n_inv);
    buff_U->address0(buff_address0);
    buff_U->ce0(buff_ce0);
    buff_U->we0(buff_we0);
    buff_U->d0(output_addr_read_reg_249);
    buff_U->q0(buff_q0);
    buff_U->address1(grp_CheckPartition_fu_163_array_r_address1);
    buff_U->ce1(buff_ce1);
    buff_U->q1(buff_q1);
    grp_CheckPartition_fu_163 = new CheckPartition("grp_CheckPartition_fu_163");
    grp_CheckPartition_fu_163->ap_clk(ap_clk);
    grp_CheckPartition_fu_163->ap_rst(ap_rst_n_inv);
    grp_CheckPartition_fu_163->ap_start(grp_CheckPartition_fu_163_ap_start);
    grp_CheckPartition_fu_163->ap_done(grp_CheckPartition_fu_163_ap_done);
    grp_CheckPartition_fu_163->ap_idle(grp_CheckPartition_fu_163_ap_idle);
    grp_CheckPartition_fu_163->ap_ready(grp_CheckPartition_fu_163_ap_ready);
    grp_CheckPartition_fu_163->value_r(solution_reg_138);
    grp_CheckPartition_fu_163->array_r_address0(grp_CheckPartition_fu_163_array_r_address0);
    grp_CheckPartition_fu_163->array_r_ce0(grp_CheckPartition_fu_163_array_r_ce0);
    grp_CheckPartition_fu_163->array_r_q0(buff_q0);
    grp_CheckPartition_fu_163->array_r_address1(grp_CheckPartition_fu_163_array_r_address1);
    grp_CheckPartition_fu_163->array_r_ce1(grp_CheckPartition_fu_163_array_r_ce1);
    grp_CheckPartition_fu_163->array_r_q1(buff_q1);
    grp_CheckPartition_fu_163->ap_return(grp_CheckPartition_fu_163_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln20_fu_196_p2);
    sensitive << ( ap_phi_mux_phi_ln20_phi_fu_130_p4 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln20_reg_240 );
    sensitive << ( output_r_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln20_reg_240 );
    sensitive << ( output_r_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage10);

    SC_METHOD(thread_ap_block_pp1_stage10_11001);

    SC_METHOD(thread_ap_block_pp1_stage10_subdone);

    SC_METHOD(thread_ap_block_pp1_stage11);

    SC_METHOD(thread_ap_block_pp1_stage11_11001);

    SC_METHOD(thread_ap_block_pp1_stage11_subdone);

    SC_METHOD(thread_ap_block_pp1_stage12);

    SC_METHOD(thread_ap_block_pp1_stage12_11001);

    SC_METHOD(thread_ap_block_pp1_stage12_subdone);

    SC_METHOD(thread_ap_block_pp1_stage13);

    SC_METHOD(thread_ap_block_pp1_stage13_11001);

    SC_METHOD(thread_ap_block_pp1_stage13_subdone);

    SC_METHOD(thread_ap_block_pp1_stage14);

    SC_METHOD(thread_ap_block_pp1_stage14_11001);

    SC_METHOD(thread_ap_block_pp1_stage14_subdone);

    SC_METHOD(thread_ap_block_pp1_stage1_11001);

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);

    SC_METHOD(thread_ap_block_pp1_stage2);

    SC_METHOD(thread_ap_block_pp1_stage2_11001);

    SC_METHOD(thread_ap_block_pp1_stage2_subdone);

    SC_METHOD(thread_ap_block_pp1_stage3);

    SC_METHOD(thread_ap_block_pp1_stage3_11001);

    SC_METHOD(thread_ap_block_pp1_stage3_subdone);

    SC_METHOD(thread_ap_block_pp1_stage4);

    SC_METHOD(thread_ap_block_pp1_stage4_11001);

    SC_METHOD(thread_ap_block_pp1_stage4_subdone);

    SC_METHOD(thread_ap_block_pp1_stage5);

    SC_METHOD(thread_ap_block_pp1_stage5_11001);

    SC_METHOD(thread_ap_block_pp1_stage5_subdone);

    SC_METHOD(thread_ap_block_pp1_stage6);

    SC_METHOD(thread_ap_block_pp1_stage6_11001);

    SC_METHOD(thread_ap_block_pp1_stage6_subdone);

    SC_METHOD(thread_ap_block_pp1_stage7);

    SC_METHOD(thread_ap_block_pp1_stage7_11001);

    SC_METHOD(thread_ap_block_pp1_stage7_subdone);

    SC_METHOD(thread_ap_block_pp1_stage8);

    SC_METHOD(thread_ap_block_pp1_stage8_11001);

    SC_METHOD(thread_ap_block_pp1_stage8_subdone);

    SC_METHOD(thread_ap_block_pp1_stage9);

    SC_METHOD(thread_ap_block_pp1_stage9_11001);

    SC_METHOD(thread_ap_block_pp1_stage9_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( icmp_ln20_reg_240 );
    sensitive << ( output_r_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state15_pp1_stage2_iter0);

    SC_METHOD(thread_ap_block_state16_pp1_stage3_iter0);

    SC_METHOD(thread_ap_block_state17_pp1_stage4_iter0);

    SC_METHOD(thread_ap_block_state18_pp1_stage5_iter0);

    SC_METHOD(thread_ap_block_state19_pp1_stage6_iter0);

    SC_METHOD(thread_ap_block_state20_pp1_stage7_iter0);

    SC_METHOD(thread_ap_block_state21_pp1_stage8_iter0);

    SC_METHOD(thread_ap_block_state22_pp1_stage9_iter0);

    SC_METHOD(thread_ap_block_state23_pp1_stage10_iter0);

    SC_METHOD(thread_ap_block_state24_pp1_stage11_iter0);

    SC_METHOD(thread_ap_block_state25_pp1_stage12_iter0);

    SC_METHOD(thread_ap_block_state26_pp1_stage13_iter0);

    SC_METHOD(thread_ap_block_state27_pp1_stage14_iter0);

    SC_METHOD(thread_ap_block_state28_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_800);
    sensitive << ( tmp_23_reg_254 );
    sensitive << ( tmp_1_reg_258 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( icmp_ln20_fu_190_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_phi_ln20_phi_fu_130_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln20_reg_240 );
    sensitive << ( phi_ln20_reg_126 );
    sensitive << ( add_ln20_reg_244 );

    SC_METHOD(thread_ap_phi_mux_solution_phi_fu_142_p4);
    sensitive << ( solution_reg_138 );
    sensitive << ( tmp_23_reg_254 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( tmp_1_reg_258 );
    sensitive << ( i_reg_262 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_ap_predicate_tran28to29_state27);
    sensitive << ( tmp_23_reg_254 );
    sensitive << ( grp_CheckPartition_fu_163_ap_return );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state29 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( sext_ln48_fu_221_p1 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_buff_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_23_reg_254 );
    sensitive << ( ap_CS_fsm_pp1_stage14 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( grp_CheckPartition_fu_163_array_r_address0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage4 );
    sensitive << ( ap_block_pp1_stage4 );
    sensitive << ( ap_CS_fsm_pp1_stage5 );
    sensitive << ( ap_block_pp1_stage5 );
    sensitive << ( ap_CS_fsm_pp1_stage6 );
    sensitive << ( ap_block_pp1_stage6 );
    sensitive << ( ap_CS_fsm_pp1_stage7 );
    sensitive << ( ap_block_pp1_stage7 );
    sensitive << ( ap_CS_fsm_pp1_stage8 );
    sensitive << ( ap_block_pp1_stage8 );
    sensitive << ( ap_CS_fsm_pp1_stage9 );
    sensitive << ( ap_block_pp1_stage9 );
    sensitive << ( ap_CS_fsm_pp1_stage10 );
    sensitive << ( ap_block_pp1_stage10 );
    sensitive << ( ap_CS_fsm_pp1_stage11 );
    sensitive << ( ap_block_pp1_stage11 );
    sensitive << ( ap_CS_fsm_pp1_stage12 );
    sensitive << ( ap_block_pp1_stage12 );
    sensitive << ( ap_CS_fsm_pp1_stage13 );
    sensitive << ( ap_block_pp1_stage13 );
    sensitive << ( ap_block_pp1_stage14 );
    sensitive << ( zext_ln20_fu_202_p1 );

    SC_METHOD(thread_buff_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_23_reg_254 );
    sensitive << ( ap_CS_fsm_pp1_stage14 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( grp_CheckPartition_fu_163_array_r_ce0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage4 );
    sensitive << ( ap_block_pp1_stage4 );
    sensitive << ( ap_CS_fsm_pp1_stage5 );
    sensitive << ( ap_block_pp1_stage5 );
    sensitive << ( ap_CS_fsm_pp1_stage6 );
    sensitive << ( ap_block_pp1_stage6 );
    sensitive << ( ap_CS_fsm_pp1_stage7 );
    sensitive << ( ap_block_pp1_stage7 );
    sensitive << ( ap_CS_fsm_pp1_stage8 );
    sensitive << ( ap_block_pp1_stage8 );
    sensitive << ( ap_CS_fsm_pp1_stage9 );
    sensitive << ( ap_block_pp1_stage9 );
    sensitive << ( ap_CS_fsm_pp1_stage10 );
    sensitive << ( ap_block_pp1_stage10 );
    sensitive << ( ap_CS_fsm_pp1_stage11 );
    sensitive << ( ap_block_pp1_stage11 );
    sensitive << ( ap_CS_fsm_pp1_stage12 );
    sensitive << ( ap_block_pp1_stage12 );
    sensitive << ( ap_CS_fsm_pp1_stage13 );
    sensitive << ( ap_block_pp1_stage13 );
    sensitive << ( ap_block_pp1_stage14 );

    SC_METHOD(thread_buff_ce1);
    sensitive << ( tmp_23_reg_254 );
    sensitive << ( ap_CS_fsm_pp1_stage14 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( grp_CheckPartition_fu_163_array_r_ce1 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1 );
    sensitive << ( ap_CS_fsm_pp1_stage2 );
    sensitive << ( ap_block_pp1_stage2 );
    sensitive << ( ap_CS_fsm_pp1_stage3 );
    sensitive << ( ap_block_pp1_stage3 );
    sensitive << ( ap_CS_fsm_pp1_stage4 );
    sensitive << ( ap_block_pp1_stage4 );
    sensitive << ( ap_CS_fsm_pp1_stage5 );
    sensitive << ( ap_block_pp1_stage5 );
    sensitive << ( ap_CS_fsm_pp1_stage6 );
    sensitive << ( ap_block_pp1_stage6 );
    sensitive << ( ap_CS_fsm_pp1_stage7 );
    sensitive << ( ap_block_pp1_stage7 );
    sensitive << ( ap_CS_fsm_pp1_stage8 );
    sensitive << ( ap_block_pp1_stage8 );
    sensitive << ( ap_CS_fsm_pp1_stage9 );
    sensitive << ( ap_block_pp1_stage9 );
    sensitive << ( ap_CS_fsm_pp1_stage10 );
    sensitive << ( ap_block_pp1_stage10 );
    sensitive << ( ap_CS_fsm_pp1_stage11 );
    sensitive << ( ap_block_pp1_stage11 );
    sensitive << ( ap_CS_fsm_pp1_stage12 );
    sensitive << ( ap_block_pp1_stage12 );
    sensitive << ( ap_CS_fsm_pp1_stage13 );
    sensitive << ( ap_block_pp1_stage13 );
    sensitive << ( ap_block_pp1_stage14 );

    SC_METHOD(thread_buff_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln20_reg_240_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_empty_fu_180_p1);
    sensitive << ( array1_reg_229 );

    SC_METHOD(thread_grp_CheckPartition_fu_163_ap_start);
    sensitive << ( grp_CheckPartition_fu_163_ap_start_reg );

    SC_METHOD(thread_i_fu_215_p2);
    sensitive << ( solution_reg_138 );

    SC_METHOD(thread_icmp_ln20_fu_190_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_phi_ln20_phi_fu_130_p4 );

    SC_METHOD(thread_output_r_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_r_ARREADY );
    sensitive << ( empty_fu_180_p1 );

    SC_METHOD(thread_output_r_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_r_ARREADY );

    SC_METHOD(thread_output_r_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln20_reg_240 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_output_r_blk_n_AR);
    sensitive << ( m_axi_output_r_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_output_r_blk_n_R);
    sensitive << ( m_axi_output_r_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln20_reg_240 );

    SC_METHOD(thread_sext_ln48_fu_221_p1);
    sensitive << ( p_0_reg_150 );

    SC_METHOD(thread_tmp_23_fu_207_p3);
    sensitive << ( ap_phi_mux_solution_phi_fu_142_p4 );

    SC_METHOD(thread_zext_ln20_fu_202_p1);
    sensitive << ( phi_ln20_reg_126_pp0_iter1_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_r_ARREADY );
    sensitive << ( icmp_ln20_fu_190_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp1_stage14_subdone );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp1_stage1_subdone );
    sensitive << ( ap_block_pp1_stage2_subdone );
    sensitive << ( ap_block_pp1_stage3_subdone );
    sensitive << ( ap_block_pp1_stage4_subdone );
    sensitive << ( ap_block_pp1_stage5_subdone );
    sensitive << ( ap_block_pp1_stage6_subdone );
    sensitive << ( ap_block_pp1_stage7_subdone );
    sensitive << ( ap_block_pp1_stage8_subdone );
    sensitive << ( ap_block_pp1_stage9_subdone );
    sensitive << ( ap_block_pp1_stage10_subdone );
    sensitive << ( ap_block_pp1_stage11_subdone );
    sensitive << ( ap_block_pp1_stage12_subdone );
    sensitive << ( ap_block_pp1_stage13_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    ap_CS_fsm = "00000000000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    grp_CheckPartition_fu_163_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AxiBurst_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_output_r_AWVALID, "(port)m_axi_output_r_AWVALID");
    sc_trace(mVcdFile, m_axi_output_r_AWREADY, "(port)m_axi_output_r_AWREADY");
    sc_trace(mVcdFile, m_axi_output_r_AWADDR, "(port)m_axi_output_r_AWADDR");
    sc_trace(mVcdFile, m_axi_output_r_AWID, "(port)m_axi_output_r_AWID");
    sc_trace(mVcdFile, m_axi_output_r_AWLEN, "(port)m_axi_output_r_AWLEN");
    sc_trace(mVcdFile, m_axi_output_r_AWSIZE, "(port)m_axi_output_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_output_r_AWBURST, "(port)m_axi_output_r_AWBURST");
    sc_trace(mVcdFile, m_axi_output_r_AWLOCK, "(port)m_axi_output_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_output_r_AWCACHE, "(port)m_axi_output_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_output_r_AWPROT, "(port)m_axi_output_r_AWPROT");
    sc_trace(mVcdFile, m_axi_output_r_AWQOS, "(port)m_axi_output_r_AWQOS");
    sc_trace(mVcdFile, m_axi_output_r_AWREGION, "(port)m_axi_output_r_AWREGION");
    sc_trace(mVcdFile, m_axi_output_r_AWUSER, "(port)m_axi_output_r_AWUSER");
    sc_trace(mVcdFile, m_axi_output_r_WVALID, "(port)m_axi_output_r_WVALID");
    sc_trace(mVcdFile, m_axi_output_r_WREADY, "(port)m_axi_output_r_WREADY");
    sc_trace(mVcdFile, m_axi_output_r_WDATA, "(port)m_axi_output_r_WDATA");
    sc_trace(mVcdFile, m_axi_output_r_WSTRB, "(port)m_axi_output_r_WSTRB");
    sc_trace(mVcdFile, m_axi_output_r_WLAST, "(port)m_axi_output_r_WLAST");
    sc_trace(mVcdFile, m_axi_output_r_WID, "(port)m_axi_output_r_WID");
    sc_trace(mVcdFile, m_axi_output_r_WUSER, "(port)m_axi_output_r_WUSER");
    sc_trace(mVcdFile, m_axi_output_r_ARVALID, "(port)m_axi_output_r_ARVALID");
    sc_trace(mVcdFile, m_axi_output_r_ARREADY, "(port)m_axi_output_r_ARREADY");
    sc_trace(mVcdFile, m_axi_output_r_ARADDR, "(port)m_axi_output_r_ARADDR");
    sc_trace(mVcdFile, m_axi_output_r_ARID, "(port)m_axi_output_r_ARID");
    sc_trace(mVcdFile, m_axi_output_r_ARLEN, "(port)m_axi_output_r_ARLEN");
    sc_trace(mVcdFile, m_axi_output_r_ARSIZE, "(port)m_axi_output_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_output_r_ARBURST, "(port)m_axi_output_r_ARBURST");
    sc_trace(mVcdFile, m_axi_output_r_ARLOCK, "(port)m_axi_output_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_output_r_ARCACHE, "(port)m_axi_output_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_output_r_ARPROT, "(port)m_axi_output_r_ARPROT");
    sc_trace(mVcdFile, m_axi_output_r_ARQOS, "(port)m_axi_output_r_ARQOS");
    sc_trace(mVcdFile, m_axi_output_r_ARREGION, "(port)m_axi_output_r_ARREGION");
    sc_trace(mVcdFile, m_axi_output_r_ARUSER, "(port)m_axi_output_r_ARUSER");
    sc_trace(mVcdFile, m_axi_output_r_RVALID, "(port)m_axi_output_r_RVALID");
    sc_trace(mVcdFile, m_axi_output_r_RREADY, "(port)m_axi_output_r_RREADY");
    sc_trace(mVcdFile, m_axi_output_r_RDATA, "(port)m_axi_output_r_RDATA");
    sc_trace(mVcdFile, m_axi_output_r_RLAST, "(port)m_axi_output_r_RLAST");
    sc_trace(mVcdFile, m_axi_output_r_RID, "(port)m_axi_output_r_RID");
    sc_trace(mVcdFile, m_axi_output_r_RUSER, "(port)m_axi_output_r_RUSER");
    sc_trace(mVcdFile, m_axi_output_r_RRESP, "(port)m_axi_output_r_RRESP");
    sc_trace(mVcdFile, m_axi_output_r_BVALID, "(port)m_axi_output_r_BVALID");
    sc_trace(mVcdFile, m_axi_output_r_BREADY, "(port)m_axi_output_r_BREADY");
    sc_trace(mVcdFile, m_axi_output_r_BRESP, "(port)m_axi_output_r_BRESP");
    sc_trace(mVcdFile, m_axi_output_r_BID, "(port)m_axi_output_r_BID");
    sc_trace(mVcdFile, m_axi_output_r_BUSER, "(port)m_axi_output_r_BUSER");
    sc_trace(mVcdFile, s_axi_sqrt_AWVALID, "(port)s_axi_sqrt_AWVALID");
    sc_trace(mVcdFile, s_axi_sqrt_AWREADY, "(port)s_axi_sqrt_AWREADY");
    sc_trace(mVcdFile, s_axi_sqrt_AWADDR, "(port)s_axi_sqrt_AWADDR");
    sc_trace(mVcdFile, s_axi_sqrt_WVALID, "(port)s_axi_sqrt_WVALID");
    sc_trace(mVcdFile, s_axi_sqrt_WREADY, "(port)s_axi_sqrt_WREADY");
    sc_trace(mVcdFile, s_axi_sqrt_WDATA, "(port)s_axi_sqrt_WDATA");
    sc_trace(mVcdFile, s_axi_sqrt_WSTRB, "(port)s_axi_sqrt_WSTRB");
    sc_trace(mVcdFile, s_axi_sqrt_ARVALID, "(port)s_axi_sqrt_ARVALID");
    sc_trace(mVcdFile, s_axi_sqrt_ARREADY, "(port)s_axi_sqrt_ARREADY");
    sc_trace(mVcdFile, s_axi_sqrt_ARADDR, "(port)s_axi_sqrt_ARADDR");
    sc_trace(mVcdFile, s_axi_sqrt_RVALID, "(port)s_axi_sqrt_RVALID");
    sc_trace(mVcdFile, s_axi_sqrt_RREADY, "(port)s_axi_sqrt_RREADY");
    sc_trace(mVcdFile, s_axi_sqrt_RDATA, "(port)s_axi_sqrt_RDATA");
    sc_trace(mVcdFile, s_axi_sqrt_RRESP, "(port)s_axi_sqrt_RRESP");
    sc_trace(mVcdFile, s_axi_sqrt_BVALID, "(port)s_axi_sqrt_BVALID");
    sc_trace(mVcdFile, s_axi_sqrt_BREADY, "(port)s_axi_sqrt_BREADY");
    sc_trace(mVcdFile, s_axi_sqrt_BRESP, "(port)s_axi_sqrt_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, array_r, "array_r");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, output_r_blk_n_AR, "output_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, output_r_blk_n_R, "output_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln20_reg_240, "icmp_ln20_reg_240");
    sc_trace(mVcdFile, output_r_AWREADY, "output_r_AWREADY");
    sc_trace(mVcdFile, output_r_WREADY, "output_r_WREADY");
    sc_trace(mVcdFile, output_r_ARVALID, "output_r_ARVALID");
    sc_trace(mVcdFile, output_r_ARREADY, "output_r_ARREADY");
    sc_trace(mVcdFile, output_r_ARADDR, "output_r_ARADDR");
    sc_trace(mVcdFile, output_r_RVALID, "output_r_RVALID");
    sc_trace(mVcdFile, output_r_RREADY, "output_r_RREADY");
    sc_trace(mVcdFile, output_r_RDATA, "output_r_RDATA");
    sc_trace(mVcdFile, output_r_RLAST, "output_r_RLAST");
    sc_trace(mVcdFile, output_r_RID, "output_r_RID");
    sc_trace(mVcdFile, output_r_RUSER, "output_r_RUSER");
    sc_trace(mVcdFile, output_r_RRESP, "output_r_RRESP");
    sc_trace(mVcdFile, output_r_BVALID, "output_r_BVALID");
    sc_trace(mVcdFile, output_r_BRESP, "output_r_BRESP");
    sc_trace(mVcdFile, output_r_BID, "output_r_BID");
    sc_trace(mVcdFile, output_r_BUSER, "output_r_BUSER");
    sc_trace(mVcdFile, phi_ln20_reg_126, "phi_ln20_reg_126");
    sc_trace(mVcdFile, phi_ln20_reg_126_pp0_iter1_reg, "phi_ln20_reg_126_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, solution_reg_138, "solution_reg_138");
    sc_trace(mVcdFile, array1_reg_229, "array1_reg_229");
    sc_trace(mVcdFile, icmp_ln20_fu_190_p2, "icmp_ln20_fu_190_p2");
    sc_trace(mVcdFile, icmp_ln20_reg_240_pp0_iter1_reg, "icmp_ln20_reg_240_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln20_fu_196_p2, "add_ln20_fu_196_p2");
    sc_trace(mVcdFile, add_ln20_reg_244, "add_ln20_reg_244");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, output_addr_read_reg_249, "output_addr_read_reg_249");
    sc_trace(mVcdFile, tmp_23_fu_207_p3, "tmp_23_fu_207_p3");
    sc_trace(mVcdFile, tmp_23_reg_254, "tmp_23_reg_254");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter0, "ap_block_state13_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state28_pp1_stage0_iter1, "ap_block_state28_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_ap_return, "grp_CheckPartition_fu_163_ap_return");
    sc_trace(mVcdFile, tmp_1_reg_258, "tmp_1_reg_258");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage14, "ap_CS_fsm_pp1_stage14");
    sc_trace(mVcdFile, ap_block_state27_pp1_stage14_iter0, "ap_block_state27_pp1_stage14_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage14_11001, "ap_block_pp1_stage14_11001");
    sc_trace(mVcdFile, i_fu_215_p2, "i_fu_215_p2");
    sc_trace(mVcdFile, i_reg_262, "i_reg_262");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_block_pp1_stage14_subdone, "ap_block_pp1_stage14_subdone");
    sc_trace(mVcdFile, ap_predicate_tran28to29_state27, "ap_predicate_tran28to29_state27");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, buff_address0, "buff_address0");
    sc_trace(mVcdFile, buff_ce0, "buff_ce0");
    sc_trace(mVcdFile, buff_we0, "buff_we0");
    sc_trace(mVcdFile, buff_q0, "buff_q0");
    sc_trace(mVcdFile, buff_ce1, "buff_ce1");
    sc_trace(mVcdFile, buff_q1, "buff_q1");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_ap_start, "grp_CheckPartition_fu_163_ap_start");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_ap_done, "grp_CheckPartition_fu_163_ap_done");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_ap_idle, "grp_CheckPartition_fu_163_ap_idle");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_ap_ready, "grp_CheckPartition_fu_163_ap_ready");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_array_r_address0, "grp_CheckPartition_fu_163_array_r_address0");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_array_r_ce0, "grp_CheckPartition_fu_163_array_r_ce0");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_array_r_address1, "grp_CheckPartition_fu_163_array_r_address1");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_array_r_ce1, "grp_CheckPartition_fu_163_array_r_ce1");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln20_phi_fu_130_p4, "ap_phi_mux_phi_ln20_phi_fu_130_p4");
    sc_trace(mVcdFile, ap_phi_mux_solution_phi_fu_142_p4, "ap_phi_mux_solution_phi_fu_142_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, p_0_reg_150, "p_0_reg_150");
    sc_trace(mVcdFile, grp_CheckPartition_fu_163_ap_start_reg, "grp_CheckPartition_fu_163_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage2, "ap_CS_fsm_pp1_stage2");
    sc_trace(mVcdFile, ap_block_pp1_stage2, "ap_block_pp1_stage2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage3, "ap_CS_fsm_pp1_stage3");
    sc_trace(mVcdFile, ap_block_pp1_stage3, "ap_block_pp1_stage3");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage4, "ap_CS_fsm_pp1_stage4");
    sc_trace(mVcdFile, ap_block_pp1_stage4, "ap_block_pp1_stage4");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage5, "ap_CS_fsm_pp1_stage5");
    sc_trace(mVcdFile, ap_block_pp1_stage5, "ap_block_pp1_stage5");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage6, "ap_CS_fsm_pp1_stage6");
    sc_trace(mVcdFile, ap_block_pp1_stage6, "ap_block_pp1_stage6");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage7, "ap_CS_fsm_pp1_stage7");
    sc_trace(mVcdFile, ap_block_pp1_stage7, "ap_block_pp1_stage7");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage8, "ap_CS_fsm_pp1_stage8");
    sc_trace(mVcdFile, ap_block_pp1_stage8, "ap_block_pp1_stage8");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage9, "ap_CS_fsm_pp1_stage9");
    sc_trace(mVcdFile, ap_block_pp1_stage9, "ap_block_pp1_stage9");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage10, "ap_CS_fsm_pp1_stage10");
    sc_trace(mVcdFile, ap_block_pp1_stage10, "ap_block_pp1_stage10");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage11, "ap_CS_fsm_pp1_stage11");
    sc_trace(mVcdFile, ap_block_pp1_stage11, "ap_block_pp1_stage11");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage12, "ap_CS_fsm_pp1_stage12");
    sc_trace(mVcdFile, ap_block_pp1_stage12, "ap_block_pp1_stage12");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage13, "ap_CS_fsm_pp1_stage13");
    sc_trace(mVcdFile, ap_block_pp1_stage13, "ap_block_pp1_stage13");
    sc_trace(mVcdFile, ap_block_pp1_stage14, "ap_block_pp1_stage14");
    sc_trace(mVcdFile, zext_ln20_fu_202_p1, "zext_ln20_fu_202_p1");
    sc_trace(mVcdFile, empty_fu_180_p1, "empty_fu_180_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, sext_ln48_fu_221_p1, "sext_ln48_fu_221_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage1_iter0, "ap_block_state14_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage2_iter0, "ap_block_state15_pp1_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage2_subdone, "ap_block_pp1_stage2_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage2_11001, "ap_block_pp1_stage2_11001");
    sc_trace(mVcdFile, ap_block_state16_pp1_stage3_iter0, "ap_block_state16_pp1_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage3_subdone, "ap_block_pp1_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage3_11001, "ap_block_pp1_stage3_11001");
    sc_trace(mVcdFile, ap_block_state17_pp1_stage4_iter0, "ap_block_state17_pp1_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage4_subdone, "ap_block_pp1_stage4_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage4_11001, "ap_block_pp1_stage4_11001");
    sc_trace(mVcdFile, ap_block_state18_pp1_stage5_iter0, "ap_block_state18_pp1_stage5_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage5_subdone, "ap_block_pp1_stage5_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage5_11001, "ap_block_pp1_stage5_11001");
    sc_trace(mVcdFile, ap_block_state19_pp1_stage6_iter0, "ap_block_state19_pp1_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage6_subdone, "ap_block_pp1_stage6_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage6_11001, "ap_block_pp1_stage6_11001");
    sc_trace(mVcdFile, ap_block_state20_pp1_stage7_iter0, "ap_block_state20_pp1_stage7_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage7_subdone, "ap_block_pp1_stage7_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage7_11001, "ap_block_pp1_stage7_11001");
    sc_trace(mVcdFile, ap_block_state21_pp1_stage8_iter0, "ap_block_state21_pp1_stage8_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage8_subdone, "ap_block_pp1_stage8_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage8_11001, "ap_block_pp1_stage8_11001");
    sc_trace(mVcdFile, ap_block_state22_pp1_stage9_iter0, "ap_block_state22_pp1_stage9_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage9_subdone, "ap_block_pp1_stage9_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage9_11001, "ap_block_pp1_stage9_11001");
    sc_trace(mVcdFile, ap_block_state23_pp1_stage10_iter0, "ap_block_state23_pp1_stage10_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage10_subdone, "ap_block_pp1_stage10_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage10_11001, "ap_block_pp1_stage10_11001");
    sc_trace(mVcdFile, ap_block_state24_pp1_stage11_iter0, "ap_block_state24_pp1_stage11_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage11_subdone, "ap_block_pp1_stage11_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage11_11001, "ap_block_pp1_stage11_11001");
    sc_trace(mVcdFile, ap_block_state25_pp1_stage12_iter0, "ap_block_state25_pp1_stage12_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage12_subdone, "ap_block_pp1_stage12_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage12_11001, "ap_block_pp1_stage12_11001");
    sc_trace(mVcdFile, ap_block_state26_pp1_stage13_iter0, "ap_block_state26_pp1_stage13_iter0");
    sc_trace(mVcdFile, ap_block_pp1_stage13_subdone, "ap_block_pp1_stage13_subdone");
    sc_trace(mVcdFile, ap_block_pp1_stage13_11001, "ap_block_pp1_stage13_11001");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_condition_800, "ap_condition_800");
#endif

    }
    mHdltvinHandle.open("AxiBurst.hdltvin.dat");
    mHdltvoutHandle.open("AxiBurst.hdltvout.dat");
}

AxiBurst::~AxiBurst() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete AxiBurst_sqrt_s_axi_U;
    delete AxiBurst_output_r_m_axi_U;
    delete buff_U;
    delete grp_CheckPartition_fu_163;
}

void AxiBurst::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void AxiBurst::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void AxiBurst::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void AxiBurst::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void AxiBurst::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_19;
}

void AxiBurst::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void AxiBurst::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void AxiBurst::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void AxiBurst::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage14_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_tran28to29_state27.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage14_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_CheckPartition_fu_163_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_fu_207_p3.read()))) {
            grp_CheckPartition_fu_163_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_CheckPartition_fu_163_ap_ready.read())) {
            grp_CheckPartition_fu_163_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_condition_800.read(), ap_const_boolean_1)) {
            p_0_reg_150 = ap_const_lv4_9;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                    esl_seteq<1,1,1>(tmp_23_fu_207_p3.read(), ap_const_lv1_1))) {
            p_0_reg_150 = ap_const_lv4_E;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        phi_ln20_reg_126 = add_ln20_reg_244.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        phi_ln20_reg_126 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        solution_reg_138 = ap_const_lv25_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_258.read()))) {
        solution_reg_138 = i_reg_262.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln20_reg_244 = add_ln20_fu_196_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        array1_reg_229 = array_r.read().range(31, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage14_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_CheckPartition_fu_163_ap_return.read()))) {
        i_reg_262 = i_fu_215_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln20_reg_240 = icmp_ln20_fu_190_p2.read();
        icmp_ln20_reg_240_pp0_iter1_reg = icmp_ln20_reg_240.read();
        phi_ln20_reg_126_pp0_iter1_reg = phi_ln20_reg_126.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_addr_read_reg_249 = output_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage14_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()))) {
        tmp_1_reg_258 = grp_CheckPartition_fu_163_ap_return.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_23_reg_254 = ap_phi_mux_solution_phi_fu_142_p4.read().range(24, 24);
    }
}

void AxiBurst::thread_add_ln20_fu_196_p2() {
    add_ln20_fu_196_p2 = (!ap_phi_mux_phi_ln20_phi_fu_130_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_phi_ln20_phi_fu_130_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void AxiBurst::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[10];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[11];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage10() {
    ap_CS_fsm_pp1_stage10 = ap_CS_fsm.read()[20];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage11() {
    ap_CS_fsm_pp1_stage11 = ap_CS_fsm.read()[21];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage12() {
    ap_CS_fsm_pp1_stage12 = ap_CS_fsm.read()[22];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage13() {
    ap_CS_fsm_pp1_stage13 = ap_CS_fsm.read()[23];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage14() {
    ap_CS_fsm_pp1_stage14 = ap_CS_fsm.read()[24];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage2() {
    ap_CS_fsm_pp1_stage2 = ap_CS_fsm.read()[12];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage3() {
    ap_CS_fsm_pp1_stage3 = ap_CS_fsm.read()[13];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage4() {
    ap_CS_fsm_pp1_stage4 = ap_CS_fsm.read()[14];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage5() {
    ap_CS_fsm_pp1_stage5 = ap_CS_fsm.read()[15];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage6() {
    ap_CS_fsm_pp1_stage6 = ap_CS_fsm.read()[16];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage7() {
    ap_CS_fsm_pp1_stage7 = ap_CS_fsm.read()[17];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage8() {
    ap_CS_fsm_pp1_stage8 = ap_CS_fsm.read()[18];
}

void AxiBurst::thread_ap_CS_fsm_pp1_stage9() {
    ap_CS_fsm_pp1_stage9 = ap_CS_fsm.read()[19];
}

void AxiBurst::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AxiBurst::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void AxiBurst::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AxiBurst::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[25];
}

void AxiBurst::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void AxiBurst::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, output_r_RVALID.read()));
}

void AxiBurst::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, output_r_RVALID.read()));
}

void AxiBurst::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage10() {
    ap_block_pp1_stage10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage10_11001() {
    ap_block_pp1_stage10_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage10_subdone() {
    ap_block_pp1_stage10_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage11() {
    ap_block_pp1_stage11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage11_11001() {
    ap_block_pp1_stage11_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage11_subdone() {
    ap_block_pp1_stage11_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage12() {
    ap_block_pp1_stage12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage12_11001() {
    ap_block_pp1_stage12_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage12_subdone() {
    ap_block_pp1_stage12_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage13() {
    ap_block_pp1_stage13 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage13_11001() {
    ap_block_pp1_stage13_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage13_subdone() {
    ap_block_pp1_stage13_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage14() {
    ap_block_pp1_stage14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage14_11001() {
    ap_block_pp1_stage14_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage14_subdone() {
    ap_block_pp1_stage14_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage2() {
    ap_block_pp1_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage2_11001() {
    ap_block_pp1_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage2_subdone() {
    ap_block_pp1_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage3() {
    ap_block_pp1_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage3_11001() {
    ap_block_pp1_stage3_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage3_subdone() {
    ap_block_pp1_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage4() {
    ap_block_pp1_stage4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage4_11001() {
    ap_block_pp1_stage4_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage4_subdone() {
    ap_block_pp1_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage5() {
    ap_block_pp1_stage5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage5_11001() {
    ap_block_pp1_stage5_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage5_subdone() {
    ap_block_pp1_stage5_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage6() {
    ap_block_pp1_stage6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage6_11001() {
    ap_block_pp1_stage6_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage6_subdone() {
    ap_block_pp1_stage6_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage7() {
    ap_block_pp1_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage7_11001() {
    ap_block_pp1_stage7_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage7_subdone() {
    ap_block_pp1_stage7_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage8() {
    ap_block_pp1_stage8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage8_11001() {
    ap_block_pp1_stage8_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage8_subdone() {
    ap_block_pp1_stage8_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage9() {
    ap_block_pp1_stage9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage9_11001() {
    ap_block_pp1_stage9_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_pp1_stage9_subdone() {
    ap_block_pp1_stage9_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, output_r_RVALID.read()));
}

void AxiBurst::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state13_pp1_stage0_iter0() {
    ap_block_state13_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state14_pp1_stage1_iter0() {
    ap_block_state14_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state15_pp1_stage2_iter0() {
    ap_block_state15_pp1_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state16_pp1_stage3_iter0() {
    ap_block_state16_pp1_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state17_pp1_stage4_iter0() {
    ap_block_state17_pp1_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state18_pp1_stage5_iter0() {
    ap_block_state18_pp1_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state19_pp1_stage6_iter0() {
    ap_block_state19_pp1_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state20_pp1_stage7_iter0() {
    ap_block_state20_pp1_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state21_pp1_stage8_iter0() {
    ap_block_state21_pp1_stage8_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state22_pp1_stage9_iter0() {
    ap_block_state22_pp1_stage9_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state23_pp1_stage10_iter0() {
    ap_block_state23_pp1_stage10_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state24_pp1_stage11_iter0() {
    ap_block_state24_pp1_stage11_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state25_pp1_stage12_iter0() {
    ap_block_state25_pp1_stage12_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state26_pp1_stage13_iter0() {
    ap_block_state26_pp1_stage13_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state27_pp1_stage14_iter0() {
    ap_block_state27_pp1_stage14_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state28_pp1_stage0_iter1() {
    ap_block_state28_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AxiBurst::thread_ap_condition_800() {
    ap_condition_800 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(tmp_1_reg_258.read(), ap_const_lv1_1));
}

void AxiBurst::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(icmp_ln20_fu_190_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void AxiBurst::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AxiBurst::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AxiBurst::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void AxiBurst::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AxiBurst::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AxiBurst::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void AxiBurst::thread_ap_phi_mux_phi_ln20_phi_fu_130_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0))) {
        ap_phi_mux_phi_ln20_phi_fu_130_p4 = add_ln20_reg_244.read();
    } else {
        ap_phi_mux_phi_ln20_phi_fu_130_p4 = phi_ln20_reg_126.read();
    }
}

void AxiBurst::thread_ap_phi_mux_solution_phi_fu_142_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_reg_258.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_solution_phi_fu_142_p4 = i_reg_262.read();
    } else {
        ap_phi_mux_solution_phi_fu_142_p4 = solution_reg_138.read();
    }
}

void AxiBurst::thread_ap_predicate_tran28to29_state27() {
    ap_predicate_tran28to29_state27 = (esl_seteq<1,1,1>(grp_CheckPartition_fu_163_ap_return.read(), ap_const_lv1_1) || esl_seteq<1,1,1>(tmp_23_reg_254.read(), ap_const_lv1_1));
}

void AxiBurst::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AxiBurst::thread_ap_return() {
    ap_return = esl_zext<32,5>(sext_ln48_fu_221_p1.read());
}

void AxiBurst::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void AxiBurst::thread_buff_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        buff_address0 =  (sc_lv<7>) (zext_ln20_fu_202_p1.read());
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage3.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage4.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage5.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage6.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage7.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage8.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage8.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage9.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage9.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage10.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage10.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage11.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage11.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage12.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage12.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage13.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage13.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage14.read(), ap_const_boolean_0)))) {
        buff_address0 = grp_CheckPartition_fu_163_array_r_address0.read();
    } else {
        buff_address0 = "XXXXXXX";
    }
}

void AxiBurst::thread_buff_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        buff_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage3.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage4.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage5.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage6.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage7.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage8.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage8.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage9.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage9.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage10.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage10.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage11.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage11.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage12.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage12.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage13.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage13.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage14.read(), ap_const_boolean_0)))) {
        buff_ce0 = grp_CheckPartition_fu_163_array_r_ce0.read();
    } else {
        buff_ce0 = ap_const_logic_0;
    }
}

void AxiBurst::thread_buff_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage3.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage4.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage5.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage6.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage7.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage8.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage8.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage9.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage9.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage10.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage10.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage11.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage11.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage12.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage13.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_23_reg_254.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage14.read(), ap_const_boolean_0)))) {
        buff_ce1 = grp_CheckPartition_fu_163_array_r_ce1.read();
    } else {
        buff_ce1 = ap_const_logic_0;
    }
}

void AxiBurst::thread_buff_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_reg_240_pp0_iter1_reg.read()))) {
        buff_we0 = ap_const_logic_1;
    } else {
        buff_we0 = ap_const_logic_0;
    }
}

void AxiBurst::thread_empty_fu_180_p1() {
    empty_fu_180_p1 = esl_zext<64,30>(array1_reg_229.read());
}

void AxiBurst::thread_grp_CheckPartition_fu_163_ap_start() {
    grp_CheckPartition_fu_163_ap_start = grp_CheckPartition_fu_163_ap_start_reg.read();
}

void AxiBurst::thread_i_fu_215_p2() {
    i_fu_215_p2 = (!solution_reg_138.read().is_01() || !ap_const_lv25_1.is_01())? sc_lv<25>(): (sc_biguint<25>(solution_reg_138.read()) + sc_biguint<25>(ap_const_lv25_1));
}

void AxiBurst::thread_icmp_ln20_fu_190_p2() {
    icmp_ln20_fu_190_p2 = (!ap_phi_mux_phi_ln20_phi_fu_130_p4.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_phi_ln20_phi_fu_130_p4.read() == ap_const_lv5_19);
}

void AxiBurst::thread_output_r_ARADDR() {
    output_r_ARADDR =  (sc_lv<32>) (empty_fu_180_p1.read());
}

void AxiBurst::thread_output_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1))) {
        output_r_ARVALID = ap_const_logic_1;
    } else {
        output_r_ARVALID = ap_const_logic_0;
    }
}

void AxiBurst::thread_output_r_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_r_RREADY = ap_const_logic_1;
    } else {
        output_r_RREADY = ap_const_logic_0;
    }
}

void AxiBurst::thread_output_r_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        output_r_blk_n_AR = m_axi_output_r_ARREADY.read();
    } else {
        output_r_blk_n_AR = ap_const_logic_1;
    }
}

void AxiBurst::thread_output_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln20_reg_240.read(), ap_const_lv1_0))) {
        output_r_blk_n_R = m_axi_output_r_RVALID.read();
    } else {
        output_r_blk_n_R = ap_const_logic_1;
    }
}

void AxiBurst::thread_sext_ln48_fu_221_p1() {
    sext_ln48_fu_221_p1 = esl_sext<5,4>(p_0_reg_150.read());
}

void AxiBurst::thread_tmp_23_fu_207_p3() {
    tmp_23_fu_207_p3 = ap_phi_mux_solution_phi_fu_142_p4.read().range(24, 24);
}

void AxiBurst::thread_zext_ln20_fu_202_p1() {
    zext_ln20_fu_202_p1 = esl_zext<64,5>(phi_ln20_reg_126_pp0_iter1_reg.read());
}

void AxiBurst::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln20_fu_190_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln20_fu_190_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 2048 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 4096 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            }
            break;
        case 8192 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            }
            break;
        case 16384 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            }
            break;
        case 32768 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage5_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            }
            break;
        case 65536 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage6_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            }
            break;
        case 131072 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage7_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            }
            break;
        case 262144 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage8_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            }
            break;
        case 524288 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage9_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            }
            break;
        case 1048576 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage10_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            }
            break;
        case 2097152 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage11_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            }
            break;
        case 4194304 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage12_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            }
            break;
        case 8388608 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage13_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            }
            break;
        case 16777216 : 
            if (esl_seteq<1,1,1>(ap_block_pp1_stage14_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void AxiBurst::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_output_r_AWVALID\" :  \"" << m_axi_output_r_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_AWREADY\" :  \"" << m_axi_output_r_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWADDR\" :  \"" << m_axi_output_r_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWID\" :  \"" << m_axi_output_r_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWLEN\" :  \"" << m_axi_output_r_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWSIZE\" :  \"" << m_axi_output_r_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWBURST\" :  \"" << m_axi_output_r_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWLOCK\" :  \"" << m_axi_output_r_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWCACHE\" :  \"" << m_axi_output_r_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWPROT\" :  \"" << m_axi_output_r_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWQOS\" :  \"" << m_axi_output_r_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWREGION\" :  \"" << m_axi_output_r_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWUSER\" :  \"" << m_axi_output_r_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WVALID\" :  \"" << m_axi_output_r_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_WREADY\" :  \"" << m_axi_output_r_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WDATA\" :  \"" << m_axi_output_r_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WSTRB\" :  \"" << m_axi_output_r_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WLAST\" :  \"" << m_axi_output_r_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WID\" :  \"" << m_axi_output_r_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WUSER\" :  \"" << m_axi_output_r_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARVALID\" :  \"" << m_axi_output_r_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_ARREADY\" :  \"" << m_axi_output_r_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARADDR\" :  \"" << m_axi_output_r_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARID\" :  \"" << m_axi_output_r_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARLEN\" :  \"" << m_axi_output_r_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARSIZE\" :  \"" << m_axi_output_r_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARBURST\" :  \"" << m_axi_output_r_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARLOCK\" :  \"" << m_axi_output_r_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARCACHE\" :  \"" << m_axi_output_r_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARPROT\" :  \"" << m_axi_output_r_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARQOS\" :  \"" << m_axi_output_r_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARREGION\" :  \"" << m_axi_output_r_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARUSER\" :  \"" << m_axi_output_r_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RVALID\" :  \"" << m_axi_output_r_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_RREADY\" :  \"" << m_axi_output_r_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RDATA\" :  \"" << m_axi_output_r_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RLAST\" :  \"" << m_axi_output_r_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RID\" :  \"" << m_axi_output_r_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RUSER\" :  \"" << m_axi_output_r_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RRESP\" :  \"" << m_axi_output_r_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BVALID\" :  \"" << m_axi_output_r_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_BREADY\" :  \"" << m_axi_output_r_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BRESP\" :  \"" << m_axi_output_r_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BID\" :  \"" << m_axi_output_r_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BUSER\" :  \"" << m_axi_output_r_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_AWVALID\" :  \"" << s_axi_sqrt_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_AWREADY\" :  \"" << s_axi_sqrt_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_AWADDR\" :  \"" << s_axi_sqrt_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_WVALID\" :  \"" << s_axi_sqrt_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_WREADY\" :  \"" << s_axi_sqrt_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_WDATA\" :  \"" << s_axi_sqrt_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_WSTRB\" :  \"" << s_axi_sqrt_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_ARVALID\" :  \"" << s_axi_sqrt_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_ARREADY\" :  \"" << s_axi_sqrt_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_ARADDR\" :  \"" << s_axi_sqrt_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_RVALID\" :  \"" << s_axi_sqrt_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_RREADY\" :  \"" << s_axi_sqrt_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_RDATA\" :  \"" << s_axi_sqrt_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_RRESP\" :  \"" << s_axi_sqrt_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_BVALID\" :  \"" << s_axi_sqrt_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_BREADY\" :  \"" << s_axi_sqrt_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_BRESP\" :  \"" << s_axi_sqrt_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

