// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CheckPartition (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        value_r,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        array_r_address1,
        array_r_ce1,
        array_r_q1,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 13'd1;
parameter    ap_ST_fsm_pp0_stage1 = 13'd2;
parameter    ap_ST_fsm_pp0_stage2 = 13'd4;
parameter    ap_ST_fsm_pp0_stage3 = 13'd8;
parameter    ap_ST_fsm_pp0_stage4 = 13'd16;
parameter    ap_ST_fsm_pp0_stage5 = 13'd32;
parameter    ap_ST_fsm_pp0_stage6 = 13'd64;
parameter    ap_ST_fsm_pp0_stage7 = 13'd128;
parameter    ap_ST_fsm_pp0_stage8 = 13'd256;
parameter    ap_ST_fsm_pp0_stage9 = 13'd512;
parameter    ap_ST_fsm_pp0_stage10 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 13'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [24:0] value_r;
output  [6:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [6:0] array_r_address1;
output   array_r_ce1;
input  [31:0] array_r_q1;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] array_r_address0;
reg array_r_ce0;
reg[6:0] array_r_address1;
reg array_r_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg   [31:0] reg_346;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] array_load_1_reg_1133;
wire   [31:0] select_ln56_4_fu_425_p3;
reg   [31:0] select_ln56_4_reg_1149;
wire   [31:0] select_ln56_5_fu_433_p3;
reg   [31:0] select_ln56_5_reg_1155;
reg   [0:0] tmp_2_reg_1161;
reg   [0:0] tmp_3_reg_1167;
reg   [0:0] tmp_4_reg_1178;
reg   [0:0] tmp_5_reg_1189;
reg   [0:0] tmp_6_reg_1195;
reg   [0:0] tmp_7_reg_1201;
reg   [0:0] tmp_8_reg_1207;
reg   [0:0] tmp_9_reg_1213;
reg   [0:0] tmp_10_reg_1219;
reg   [0:0] tmp_11_reg_1225;
reg   [0:0] tmp_12_reg_1231;
reg   [0:0] tmp_13_reg_1237;
reg   [0:0] tmp_14_reg_1243;
reg   [0:0] tmp_15_reg_1249;
reg   [0:0] tmp_16_reg_1255;
reg   [0:0] tmp_17_reg_1261;
reg   [0:0] tmp_18_reg_1267;
reg   [0:0] tmp_19_reg_1273;
reg   [0:0] tmp_20_reg_1279;
reg   [0:0] tmp_21_reg_1285;
reg   [0:0] tmp_22_reg_1291;
wire   [31:0] select_ln56_8_fu_643_p3;
reg   [31:0] select_ln56_8_reg_1297;
wire   [31:0] select_ln56_9_fu_650_p3;
reg   [31:0] select_ln56_9_reg_1303;
wire   [31:0] select_ln56_12_fu_691_p3;
reg   [31:0] select_ln56_12_reg_1319;
wire   [31:0] select_ln56_13_fu_698_p3;
reg   [31:0] select_ln56_13_reg_1325;
wire   [31:0] select_ln56_16_fu_739_p3;
reg   [31:0] select_ln56_16_reg_1341;
wire   [31:0] select_ln56_17_fu_746_p3;
reg   [31:0] select_ln56_17_reg_1347;
wire   [31:0] select_ln56_20_fu_787_p3;
reg   [31:0] select_ln56_20_reg_1363;
wire   [31:0] select_ln56_21_fu_794_p3;
reg   [31:0] select_ln56_21_reg_1369;
wire   [31:0] select_ln56_24_fu_835_p3;
reg   [31:0] select_ln56_24_reg_1385;
wire   [31:0] select_ln56_25_fu_842_p3;
reg   [31:0] select_ln56_25_reg_1391;
wire   [31:0] select_ln56_28_fu_883_p3;
reg   [31:0] select_ln56_28_reg_1407;
wire   [31:0] select_ln56_29_fu_890_p3;
reg   [31:0] select_ln56_29_reg_1413;
wire   [31:0] select_ln56_32_fu_931_p3;
reg   [31:0] select_ln56_32_reg_1429;
wire   [31:0] select_ln56_33_fu_938_p3;
reg   [31:0] select_ln56_33_reg_1435;
wire   [31:0] select_ln56_36_fu_979_p3;
reg   [31:0] select_ln56_36_reg_1451;
wire   [31:0] select_ln56_37_fu_986_p3;
reg   [31:0] select_ln56_37_reg_1457;
wire   [31:0] select_ln56_40_fu_1027_p3;
reg   [31:0] select_ln56_40_reg_1473;
wire   [31:0] select_ln56_41_fu_1034_p3;
reg   [31:0] select_ln56_41_reg_1479;
wire   [31:0] select_ln56_44_fu_1075_p3;
reg   [31:0] select_ln56_44_reg_1495;
wire   [31:0] select_ln56_45_fu_1082_p3;
reg   [31:0] select_ln56_45_reg_1501;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage12_subdone;
reg   [24:0] ap_port_reg_value_r;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage12;
wire   [0:0] trunc_ln56_fu_351_p1;
wire   [31:0] select_ln56_1_fu_363_p3;
wire   [31:0] select_ln56_fu_355_p3;
wire   [0:0] tmp_fu_371_p3;
wire   [31:0] add_ln60_fu_384_p2;
wire   [31:0] add_ln57_fu_379_p2;
wire   [31:0] select_ln56_3_fu_397_p3;
wire   [31:0] select_ln56_2_fu_389_p3;
wire   [0:0] tmp_1_fu_405_p3;
wire   [31:0] add_ln60_1_fu_419_p2;
wire   [31:0] add_ln57_1_fu_413_p2;
wire   [31:0] add_ln60_2_fu_614_p2;
wire   [31:0] add_ln57_2_fu_609_p2;
wire   [31:0] select_ln56_7_fu_625_p3;
wire   [31:0] select_ln56_6_fu_619_p3;
wire   [31:0] add_ln60_3_fu_637_p2;
wire   [31:0] add_ln57_3_fu_631_p2;
wire   [31:0] add_ln60_4_fu_662_p2;
wire   [31:0] add_ln57_4_fu_657_p2;
wire   [31:0] select_ln56_11_fu_673_p3;
wire   [31:0] select_ln56_10_fu_667_p3;
wire   [31:0] add_ln60_5_fu_685_p2;
wire   [31:0] add_ln57_5_fu_679_p2;
wire   [31:0] add_ln60_6_fu_710_p2;
wire   [31:0] add_ln57_6_fu_705_p2;
wire   [31:0] select_ln56_15_fu_721_p3;
wire   [31:0] select_ln56_14_fu_715_p3;
wire   [31:0] add_ln60_7_fu_733_p2;
wire   [31:0] add_ln57_7_fu_727_p2;
wire   [31:0] add_ln60_8_fu_758_p2;
wire   [31:0] add_ln57_8_fu_753_p2;
wire   [31:0] select_ln56_19_fu_769_p3;
wire   [31:0] select_ln56_18_fu_763_p3;
wire   [31:0] add_ln60_9_fu_781_p2;
wire   [31:0] add_ln57_9_fu_775_p2;
wire   [31:0] add_ln60_10_fu_806_p2;
wire   [31:0] add_ln57_10_fu_801_p2;
wire   [31:0] select_ln56_23_fu_817_p3;
wire   [31:0] select_ln56_22_fu_811_p3;
wire   [31:0] add_ln60_11_fu_829_p2;
wire   [31:0] add_ln57_11_fu_823_p2;
wire   [31:0] add_ln60_12_fu_854_p2;
wire   [31:0] add_ln57_12_fu_849_p2;
wire   [31:0] select_ln56_27_fu_865_p3;
wire   [31:0] select_ln56_26_fu_859_p3;
wire   [31:0] add_ln60_13_fu_877_p2;
wire   [31:0] add_ln57_13_fu_871_p2;
wire   [31:0] add_ln60_14_fu_902_p2;
wire   [31:0] add_ln57_14_fu_897_p2;
wire   [31:0] select_ln56_31_fu_913_p3;
wire   [31:0] select_ln56_30_fu_907_p3;
wire   [31:0] add_ln60_15_fu_925_p2;
wire   [31:0] add_ln57_15_fu_919_p2;
wire   [31:0] add_ln60_16_fu_950_p2;
wire   [31:0] add_ln57_16_fu_945_p2;
wire   [31:0] select_ln56_35_fu_961_p3;
wire   [31:0] select_ln56_34_fu_955_p3;
wire   [31:0] add_ln60_17_fu_973_p2;
wire   [31:0] add_ln57_17_fu_967_p2;
wire   [31:0] add_ln60_18_fu_998_p2;
wire   [31:0] add_ln57_18_fu_993_p2;
wire   [31:0] select_ln56_39_fu_1009_p3;
wire   [31:0] select_ln56_38_fu_1003_p3;
wire   [31:0] add_ln60_19_fu_1021_p2;
wire   [31:0] add_ln57_19_fu_1015_p2;
wire   [31:0] add_ln60_20_fu_1046_p2;
wire   [31:0] add_ln57_20_fu_1041_p2;
wire   [31:0] select_ln56_43_fu_1057_p3;
wire   [31:0] select_ln56_42_fu_1051_p3;
wire   [31:0] add_ln60_21_fu_1069_p2;
wire   [31:0] add_ln57_21_fu_1063_p2;
wire   [31:0] add_ln60_22_fu_1094_p2;
wire   [31:0] add_ln57_22_fu_1089_p2;
wire   [31:0] select_ln56_46_fu_1099_p3;
wire   [31:0] add_ln60_23_fu_1111_p2;
wire   [31:0] select_ln56_47_fu_1105_p3;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage12_subdone) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_346 <= array_r_q1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        reg_346 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_value_r <= value_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        array_load_1_reg_1133 <= array_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln56_12_reg_1319 <= select_ln56_12_fu_691_p3;
        select_ln56_13_reg_1325 <= select_ln56_13_fu_698_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        select_ln56_16_reg_1341 <= select_ln56_16_fu_739_p3;
        select_ln56_17_reg_1347 <= select_ln56_17_fu_746_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        select_ln56_20_reg_1363 <= select_ln56_20_fu_787_p3;
        select_ln56_21_reg_1369 <= select_ln56_21_fu_794_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        select_ln56_24_reg_1385 <= select_ln56_24_fu_835_p3;
        select_ln56_25_reg_1391 <= select_ln56_25_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        select_ln56_28_reg_1407 <= select_ln56_28_fu_883_p3;
        select_ln56_29_reg_1413 <= select_ln56_29_fu_890_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        select_ln56_32_reg_1429 <= select_ln56_32_fu_931_p3;
        select_ln56_33_reg_1435 <= select_ln56_33_fu_938_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        select_ln56_36_reg_1451 <= select_ln56_36_fu_979_p3;
        select_ln56_37_reg_1457 <= select_ln56_37_fu_986_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        select_ln56_40_reg_1473 <= select_ln56_40_fu_1027_p3;
        select_ln56_41_reg_1479 <= select_ln56_41_fu_1034_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        select_ln56_44_reg_1495 <= select_ln56_44_fu_1075_p3;
        select_ln56_45_reg_1501 <= select_ln56_45_fu_1082_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln56_4_reg_1149 <= select_ln56_4_fu_425_p3;
        select_ln56_5_reg_1155 <= select_ln56_5_fu_433_p3;
        tmp_10_reg_1219 <= ap_port_reg_value_r[32'd11];
        tmp_11_reg_1225 <= ap_port_reg_value_r[32'd12];
        tmp_12_reg_1231 <= ap_port_reg_value_r[32'd13];
        tmp_13_reg_1237 <= ap_port_reg_value_r[32'd14];
        tmp_14_reg_1243 <= ap_port_reg_value_r[32'd15];
        tmp_15_reg_1249 <= ap_port_reg_value_r[32'd16];
        tmp_16_reg_1255 <= ap_port_reg_value_r[32'd17];
        tmp_17_reg_1261 <= ap_port_reg_value_r[32'd18];
        tmp_18_reg_1267 <= ap_port_reg_value_r[32'd19];
        tmp_19_reg_1273 <= ap_port_reg_value_r[32'd20];
        tmp_20_reg_1279 <= ap_port_reg_value_r[32'd21];
        tmp_21_reg_1285 <= ap_port_reg_value_r[32'd22];
        tmp_22_reg_1291 <= ap_port_reg_value_r[32'd23];
        tmp_2_reg_1161 <= ap_port_reg_value_r[32'd3];
        tmp_3_reg_1167 <= ap_port_reg_value_r[32'd4];
        tmp_4_reg_1178 <= ap_port_reg_value_r[32'd5];
        tmp_5_reg_1189 <= ap_port_reg_value_r[32'd6];
        tmp_6_reg_1195 <= ap_port_reg_value_r[32'd7];
        tmp_7_reg_1201 <= ap_port_reg_value_r[32'd8];
        tmp_8_reg_1207 <= ap_port_reg_value_r[32'd9];
        tmp_9_reg_1213 <= ap_port_reg_value_r[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        select_ln56_8_reg_1297 <= select_ln56_8_fu_643_p3;
        select_ln56_9_reg_1303 <= select_ln56_9_fu_650_p3;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            array_r_address0 = 64'd24;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            array_r_address0 = 64'd22;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            array_r_address0 = 64'd20;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            array_r_address0 = 64'd18;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            array_r_address0 = 64'd16;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            array_r_address0 = 64'd14;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            array_r_address0 = 64'd12;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            array_r_address0 = 64'd10;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            array_r_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            array_r_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            array_r_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            array_r_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            array_r_address0 = 64'd0;
        end else begin
            array_r_address0 = 'bx;
        end
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            array_r_address1 = 64'd23;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            array_r_address1 = 64'd21;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            array_r_address1 = 64'd19;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            array_r_address1 = 64'd17;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            array_r_address1 = 64'd15;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            array_r_address1 = 64'd13;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            array_r_address1 = 64'd11;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            array_r_address1 = 64'd9;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            array_r_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            array_r_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            array_r_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            array_r_address1 = 64'd1;
        end else begin
            array_r_address1 = 'bx;
        end
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_10_fu_801_p2 = (reg_346 + select_ln56_21_reg_1369);

assign add_ln57_11_fu_823_p2 = (array_r_q0 + select_ln56_23_fu_817_p3);

assign add_ln57_12_fu_849_p2 = (reg_346 + select_ln56_25_reg_1391);

assign add_ln57_13_fu_871_p2 = (array_r_q0 + select_ln56_27_fu_865_p3);

assign add_ln57_14_fu_897_p2 = (reg_346 + select_ln56_29_reg_1413);

assign add_ln57_15_fu_919_p2 = (array_r_q0 + select_ln56_31_fu_913_p3);

assign add_ln57_16_fu_945_p2 = (reg_346 + select_ln56_33_reg_1435);

assign add_ln57_17_fu_967_p2 = (array_r_q0 + select_ln56_35_fu_961_p3);

assign add_ln57_18_fu_993_p2 = (reg_346 + select_ln56_37_reg_1457);

assign add_ln57_19_fu_1015_p2 = (array_r_q0 + select_ln56_39_fu_1009_p3);

assign add_ln57_1_fu_413_p2 = (array_r_q0 + select_ln56_3_fu_397_p3);

assign add_ln57_20_fu_1041_p2 = (reg_346 + select_ln56_41_reg_1479);

assign add_ln57_21_fu_1063_p2 = (array_r_q0 + select_ln56_43_fu_1057_p3);

assign add_ln57_22_fu_1089_p2 = (reg_346 + select_ln56_45_reg_1501);

assign add_ln57_2_fu_609_p2 = (reg_346 + select_ln56_5_reg_1155);

assign add_ln57_3_fu_631_p2 = (array_r_q0 + select_ln56_7_fu_625_p3);

assign add_ln57_4_fu_657_p2 = (reg_346 + select_ln56_9_reg_1303);

assign add_ln57_5_fu_679_p2 = (array_r_q0 + select_ln56_11_fu_673_p3);

assign add_ln57_6_fu_705_p2 = (reg_346 + select_ln56_13_reg_1325);

assign add_ln57_7_fu_727_p2 = (array_r_q0 + select_ln56_15_fu_721_p3);

assign add_ln57_8_fu_753_p2 = (reg_346 + select_ln56_17_reg_1347);

assign add_ln57_9_fu_775_p2 = (array_r_q0 + select_ln56_19_fu_769_p3);

assign add_ln57_fu_379_p2 = (array_load_1_reg_1133 + select_ln56_1_fu_363_p3);

assign add_ln60_10_fu_806_p2 = (reg_346 + select_ln56_20_reg_1363);

assign add_ln60_11_fu_829_p2 = (array_r_q0 + select_ln56_22_fu_811_p3);

assign add_ln60_12_fu_854_p2 = (reg_346 + select_ln56_24_reg_1385);

assign add_ln60_13_fu_877_p2 = (array_r_q0 + select_ln56_26_fu_859_p3);

assign add_ln60_14_fu_902_p2 = (reg_346 + select_ln56_28_reg_1407);

assign add_ln60_15_fu_925_p2 = (array_r_q0 + select_ln56_30_fu_907_p3);

assign add_ln60_16_fu_950_p2 = (reg_346 + select_ln56_32_reg_1429);

assign add_ln60_17_fu_973_p2 = (array_r_q0 + select_ln56_34_fu_955_p3);

assign add_ln60_18_fu_998_p2 = (reg_346 + select_ln56_36_reg_1451);

assign add_ln60_19_fu_1021_p2 = (array_r_q0 + select_ln56_38_fu_1003_p3);

assign add_ln60_1_fu_419_p2 = (array_r_q0 + select_ln56_2_fu_389_p3);

assign add_ln60_20_fu_1046_p2 = (reg_346 + select_ln56_40_reg_1473);

assign add_ln60_21_fu_1069_p2 = (array_r_q0 + select_ln56_42_fu_1051_p3);

assign add_ln60_22_fu_1094_p2 = (reg_346 + select_ln56_44_reg_1495);

assign add_ln60_23_fu_1111_p2 = (array_r_q0 + select_ln56_46_fu_1099_p3);

assign add_ln60_2_fu_614_p2 = (reg_346 + select_ln56_4_reg_1149);

assign add_ln60_3_fu_637_p2 = (array_r_q0 + select_ln56_6_fu_619_p3);

assign add_ln60_4_fu_662_p2 = (reg_346 + select_ln56_8_reg_1297);

assign add_ln60_5_fu_685_p2 = (array_r_q0 + select_ln56_10_fu_667_p3);

assign add_ln60_6_fu_710_p2 = (reg_346 + select_ln56_12_reg_1319);

assign add_ln60_7_fu_733_p2 = (array_r_q0 + select_ln56_14_fu_715_p3);

assign add_ln60_8_fu_758_p2 = (reg_346 + select_ln56_16_reg_1341);

assign add_ln60_9_fu_781_p2 = (array_r_q0 + select_ln56_18_fu_763_p3);

assign add_ln60_fu_384_p2 = (array_load_1_reg_1133 + select_ln56_fu_355_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((add_ln60_23_fu_1111_p2 == select_ln56_47_fu_1105_p3) ? 1'b1 : 1'b0);

assign select_ln56_10_fu_667_p3 = ((tmp_4_reg_1178[0:0] === 1'b1) ? select_ln56_8_reg_1297 : add_ln60_4_fu_662_p2);

assign select_ln56_11_fu_673_p3 = ((tmp_4_reg_1178[0:0] === 1'b1) ? add_ln57_4_fu_657_p2 : select_ln56_9_reg_1303);

assign select_ln56_12_fu_691_p3 = ((tmp_5_reg_1189[0:0] === 1'b1) ? select_ln56_10_fu_667_p3 : add_ln60_5_fu_685_p2);

assign select_ln56_13_fu_698_p3 = ((tmp_5_reg_1189[0:0] === 1'b1) ? add_ln57_5_fu_679_p2 : select_ln56_11_fu_673_p3);

assign select_ln56_14_fu_715_p3 = ((tmp_6_reg_1195[0:0] === 1'b1) ? select_ln56_12_reg_1319 : add_ln60_6_fu_710_p2);

assign select_ln56_15_fu_721_p3 = ((tmp_6_reg_1195[0:0] === 1'b1) ? add_ln57_6_fu_705_p2 : select_ln56_13_reg_1325);

assign select_ln56_16_fu_739_p3 = ((tmp_7_reg_1201[0:0] === 1'b1) ? select_ln56_14_fu_715_p3 : add_ln60_7_fu_733_p2);

assign select_ln56_17_fu_746_p3 = ((tmp_7_reg_1201[0:0] === 1'b1) ? add_ln57_7_fu_727_p2 : select_ln56_15_fu_721_p3);

assign select_ln56_18_fu_763_p3 = ((tmp_8_reg_1207[0:0] === 1'b1) ? select_ln56_16_reg_1341 : add_ln60_8_fu_758_p2);

assign select_ln56_19_fu_769_p3 = ((tmp_8_reg_1207[0:0] === 1'b1) ? add_ln57_8_fu_753_p2 : select_ln56_17_reg_1347);

assign select_ln56_1_fu_363_p3 = ((trunc_ln56_fu_351_p1[0:0] === 1'b1) ? reg_346 : 32'd0);

assign select_ln56_20_fu_787_p3 = ((tmp_9_reg_1213[0:0] === 1'b1) ? select_ln56_18_fu_763_p3 : add_ln60_9_fu_781_p2);

assign select_ln56_21_fu_794_p3 = ((tmp_9_reg_1213[0:0] === 1'b1) ? add_ln57_9_fu_775_p2 : select_ln56_19_fu_769_p3);

assign select_ln56_22_fu_811_p3 = ((tmp_10_reg_1219[0:0] === 1'b1) ? select_ln56_20_reg_1363 : add_ln60_10_fu_806_p2);

assign select_ln56_23_fu_817_p3 = ((tmp_10_reg_1219[0:0] === 1'b1) ? add_ln57_10_fu_801_p2 : select_ln56_21_reg_1369);

assign select_ln56_24_fu_835_p3 = ((tmp_11_reg_1225[0:0] === 1'b1) ? select_ln56_22_fu_811_p3 : add_ln60_11_fu_829_p2);

assign select_ln56_25_fu_842_p3 = ((tmp_11_reg_1225[0:0] === 1'b1) ? add_ln57_11_fu_823_p2 : select_ln56_23_fu_817_p3);

assign select_ln56_26_fu_859_p3 = ((tmp_12_reg_1231[0:0] === 1'b1) ? select_ln56_24_reg_1385 : add_ln60_12_fu_854_p2);

assign select_ln56_27_fu_865_p3 = ((tmp_12_reg_1231[0:0] === 1'b1) ? add_ln57_12_fu_849_p2 : select_ln56_25_reg_1391);

assign select_ln56_28_fu_883_p3 = ((tmp_13_reg_1237[0:0] === 1'b1) ? select_ln56_26_fu_859_p3 : add_ln60_13_fu_877_p2);

assign select_ln56_29_fu_890_p3 = ((tmp_13_reg_1237[0:0] === 1'b1) ? add_ln57_13_fu_871_p2 : select_ln56_27_fu_865_p3);

assign select_ln56_2_fu_389_p3 = ((tmp_fu_371_p3[0:0] === 1'b1) ? select_ln56_fu_355_p3 : add_ln60_fu_384_p2);

assign select_ln56_30_fu_907_p3 = ((tmp_14_reg_1243[0:0] === 1'b1) ? select_ln56_28_reg_1407 : add_ln60_14_fu_902_p2);

assign select_ln56_31_fu_913_p3 = ((tmp_14_reg_1243[0:0] === 1'b1) ? add_ln57_14_fu_897_p2 : select_ln56_29_reg_1413);

assign select_ln56_32_fu_931_p3 = ((tmp_15_reg_1249[0:0] === 1'b1) ? select_ln56_30_fu_907_p3 : add_ln60_15_fu_925_p2);

assign select_ln56_33_fu_938_p3 = ((tmp_15_reg_1249[0:0] === 1'b1) ? add_ln57_15_fu_919_p2 : select_ln56_31_fu_913_p3);

assign select_ln56_34_fu_955_p3 = ((tmp_16_reg_1255[0:0] === 1'b1) ? select_ln56_32_reg_1429 : add_ln60_16_fu_950_p2);

assign select_ln56_35_fu_961_p3 = ((tmp_16_reg_1255[0:0] === 1'b1) ? add_ln57_16_fu_945_p2 : select_ln56_33_reg_1435);

assign select_ln56_36_fu_979_p3 = ((tmp_17_reg_1261[0:0] === 1'b1) ? select_ln56_34_fu_955_p3 : add_ln60_17_fu_973_p2);

assign select_ln56_37_fu_986_p3 = ((tmp_17_reg_1261[0:0] === 1'b1) ? add_ln57_17_fu_967_p2 : select_ln56_35_fu_961_p3);

assign select_ln56_38_fu_1003_p3 = ((tmp_18_reg_1267[0:0] === 1'b1) ? select_ln56_36_reg_1451 : add_ln60_18_fu_998_p2);

assign select_ln56_39_fu_1009_p3 = ((tmp_18_reg_1267[0:0] === 1'b1) ? add_ln57_18_fu_993_p2 : select_ln56_37_reg_1457);

assign select_ln56_3_fu_397_p3 = ((tmp_fu_371_p3[0:0] === 1'b1) ? add_ln57_fu_379_p2 : select_ln56_1_fu_363_p3);

assign select_ln56_40_fu_1027_p3 = ((tmp_19_reg_1273[0:0] === 1'b1) ? select_ln56_38_fu_1003_p3 : add_ln60_19_fu_1021_p2);

assign select_ln56_41_fu_1034_p3 = ((tmp_19_reg_1273[0:0] === 1'b1) ? add_ln57_19_fu_1015_p2 : select_ln56_39_fu_1009_p3);

assign select_ln56_42_fu_1051_p3 = ((tmp_20_reg_1279[0:0] === 1'b1) ? select_ln56_40_reg_1473 : add_ln60_20_fu_1046_p2);

assign select_ln56_43_fu_1057_p3 = ((tmp_20_reg_1279[0:0] === 1'b1) ? add_ln57_20_fu_1041_p2 : select_ln56_41_reg_1479);

assign select_ln56_44_fu_1075_p3 = ((tmp_21_reg_1285[0:0] === 1'b1) ? select_ln56_42_fu_1051_p3 : add_ln60_21_fu_1069_p2);

assign select_ln56_45_fu_1082_p3 = ((tmp_21_reg_1285[0:0] === 1'b1) ? add_ln57_21_fu_1063_p2 : select_ln56_43_fu_1057_p3);

assign select_ln56_46_fu_1099_p3 = ((tmp_22_reg_1291[0:0] === 1'b1) ? select_ln56_44_reg_1495 : add_ln60_22_fu_1094_p2);

assign select_ln56_47_fu_1105_p3 = ((tmp_22_reg_1291[0:0] === 1'b1) ? add_ln57_22_fu_1089_p2 : select_ln56_45_reg_1501);

assign select_ln56_4_fu_425_p3 = ((tmp_1_fu_405_p3[0:0] === 1'b1) ? select_ln56_2_fu_389_p3 : add_ln60_1_fu_419_p2);

assign select_ln56_5_fu_433_p3 = ((tmp_1_fu_405_p3[0:0] === 1'b1) ? add_ln57_1_fu_413_p2 : select_ln56_3_fu_397_p3);

assign select_ln56_6_fu_619_p3 = ((tmp_2_reg_1161[0:0] === 1'b1) ? select_ln56_4_reg_1149 : add_ln60_2_fu_614_p2);

assign select_ln56_7_fu_625_p3 = ((tmp_2_reg_1161[0:0] === 1'b1) ? add_ln57_2_fu_609_p2 : select_ln56_5_reg_1155);

assign select_ln56_8_fu_643_p3 = ((tmp_3_reg_1167[0:0] === 1'b1) ? select_ln56_6_fu_619_p3 : add_ln60_3_fu_637_p2);

assign select_ln56_9_fu_650_p3 = ((tmp_3_reg_1167[0:0] === 1'b1) ? add_ln57_3_fu_631_p2 : select_ln56_7_fu_625_p3);

assign select_ln56_fu_355_p3 = ((trunc_ln56_fu_351_p1[0:0] === 1'b1) ? 32'd0 : reg_346);

assign tmp_1_fu_405_p3 = ap_port_reg_value_r[32'd2];

assign tmp_fu_371_p3 = ap_port_reg_value_r[32'd1];

assign trunc_ln56_fu_351_p1 = ap_port_reg_value_r[0:0];

endmodule //CheckPartition
