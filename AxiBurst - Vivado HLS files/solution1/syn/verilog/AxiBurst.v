// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AxiBurst,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=125829172,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1613,HLS_SYN_LUT=4666,HLS_VERSION=2020_1}" *)

module AxiBurst (
        ap_clk,
        ap_rst_n,
        m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY,
        m_axi_output_r_AWADDR,
        m_axi_output_r_AWID,
        m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID,
        m_axi_output_r_WREADY,
        m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST,
        m_axi_output_r_WID,
        m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY,
        m_axi_output_r_ARADDR,
        m_axi_output_r_ARID,
        m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID,
        m_axi_output_r_RREADY,
        m_axi_output_r_RDATA,
        m_axi_output_r_RLAST,
        m_axi_output_r_RID,
        m_axi_output_r_RUSER,
        m_axi_output_r_RRESP,
        m_axi_output_r_BVALID,
        m_axi_output_r_BREADY,
        m_axi_output_r_BRESP,
        m_axi_output_r_BID,
        m_axi_output_r_BUSER,
        s_axi_sqrt_AWVALID,
        s_axi_sqrt_AWREADY,
        s_axi_sqrt_AWADDR,
        s_axi_sqrt_WVALID,
        s_axi_sqrt_WREADY,
        s_axi_sqrt_WDATA,
        s_axi_sqrt_WSTRB,
        s_axi_sqrt_ARVALID,
        s_axi_sqrt_ARREADY,
        s_axi_sqrt_ARADDR,
        s_axi_sqrt_RVALID,
        s_axi_sqrt_RREADY,
        s_axi_sqrt_RDATA,
        s_axi_sqrt_RRESP,
        s_axi_sqrt_BVALID,
        s_axi_sqrt_BREADY,
        s_axi_sqrt_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_pp0_stage0 = 26'd256;
parameter    ap_ST_fsm_state12 = 26'd512;
parameter    ap_ST_fsm_pp1_stage0 = 26'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 26'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 26'd4096;
parameter    ap_ST_fsm_pp1_stage3 = 26'd8192;
parameter    ap_ST_fsm_pp1_stage4 = 26'd16384;
parameter    ap_ST_fsm_pp1_stage5 = 26'd32768;
parameter    ap_ST_fsm_pp1_stage6 = 26'd65536;
parameter    ap_ST_fsm_pp1_stage7 = 26'd131072;
parameter    ap_ST_fsm_pp1_stage8 = 26'd262144;
parameter    ap_ST_fsm_pp1_stage9 = 26'd524288;
parameter    ap_ST_fsm_pp1_stage10 = 26'd1048576;
parameter    ap_ST_fsm_pp1_stage11 = 26'd2097152;
parameter    ap_ST_fsm_pp1_stage12 = 26'd4194304;
parameter    ap_ST_fsm_pp1_stage13 = 26'd8388608;
parameter    ap_ST_fsm_pp1_stage14 = 26'd16777216;
parameter    ap_ST_fsm_state29 = 26'd33554432;
parameter    C_S_AXI_SQRT_DATA_WIDTH = 32;
parameter    C_S_AXI_SQRT_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_ID_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_DATA_WIDTH = 32;
parameter    C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_OUTPUT_R_USER_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_PROT_VALUE = 0;
parameter    C_M_AXI_OUTPUT_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_SQRT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_OUTPUT_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_output_r_AWVALID;
input   m_axi_output_r_AWREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_output_r_AWADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_AWID;
output  [7:0] m_axi_output_r_AWLEN;
output  [2:0] m_axi_output_r_AWSIZE;
output  [1:0] m_axi_output_r_AWBURST;
output  [1:0] m_axi_output_r_AWLOCK;
output  [3:0] m_axi_output_r_AWCACHE;
output  [2:0] m_axi_output_r_AWPROT;
output  [3:0] m_axi_output_r_AWQOS;
output  [3:0] m_axi_output_r_AWREGION;
output  [C_M_AXI_OUTPUT_R_AWUSER_WIDTH - 1:0] m_axi_output_r_AWUSER;
output   m_axi_output_r_WVALID;
input   m_axi_output_r_WREADY;
output  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_output_r_WDATA;
output  [C_M_AXI_OUTPUT_R_WSTRB_WIDTH - 1:0] m_axi_output_r_WSTRB;
output   m_axi_output_r_WLAST;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_WID;
output  [C_M_AXI_OUTPUT_R_WUSER_WIDTH - 1:0] m_axi_output_r_WUSER;
output   m_axi_output_r_ARVALID;
input   m_axi_output_r_ARREADY;
output  [C_M_AXI_OUTPUT_R_ADDR_WIDTH - 1:0] m_axi_output_r_ARADDR;
output  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_ARID;
output  [7:0] m_axi_output_r_ARLEN;
output  [2:0] m_axi_output_r_ARSIZE;
output  [1:0] m_axi_output_r_ARBURST;
output  [1:0] m_axi_output_r_ARLOCK;
output  [3:0] m_axi_output_r_ARCACHE;
output  [2:0] m_axi_output_r_ARPROT;
output  [3:0] m_axi_output_r_ARQOS;
output  [3:0] m_axi_output_r_ARREGION;
output  [C_M_AXI_OUTPUT_R_ARUSER_WIDTH - 1:0] m_axi_output_r_ARUSER;
input   m_axi_output_r_RVALID;
output   m_axi_output_r_RREADY;
input  [C_M_AXI_OUTPUT_R_DATA_WIDTH - 1:0] m_axi_output_r_RDATA;
input   m_axi_output_r_RLAST;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_RID;
input  [C_M_AXI_OUTPUT_R_RUSER_WIDTH - 1:0] m_axi_output_r_RUSER;
input  [1:0] m_axi_output_r_RRESP;
input   m_axi_output_r_BVALID;
output   m_axi_output_r_BREADY;
input  [1:0] m_axi_output_r_BRESP;
input  [C_M_AXI_OUTPUT_R_ID_WIDTH - 1:0] m_axi_output_r_BID;
input  [C_M_AXI_OUTPUT_R_BUSER_WIDTH - 1:0] m_axi_output_r_BUSER;
input   s_axi_sqrt_AWVALID;
output   s_axi_sqrt_AWREADY;
input  [C_S_AXI_SQRT_ADDR_WIDTH - 1:0] s_axi_sqrt_AWADDR;
input   s_axi_sqrt_WVALID;
output   s_axi_sqrt_WREADY;
input  [C_S_AXI_SQRT_DATA_WIDTH - 1:0] s_axi_sqrt_WDATA;
input  [C_S_AXI_SQRT_WSTRB_WIDTH - 1:0] s_axi_sqrt_WSTRB;
input   s_axi_sqrt_ARVALID;
output   s_axi_sqrt_ARREADY;
input  [C_S_AXI_SQRT_ADDR_WIDTH - 1:0] s_axi_sqrt_ARADDR;
output   s_axi_sqrt_RVALID;
input   s_axi_sqrt_RREADY;
output  [C_S_AXI_SQRT_DATA_WIDTH - 1:0] s_axi_sqrt_RDATA;
output  [1:0] s_axi_sqrt_RRESP;
output   s_axi_sqrt_BVALID;
input   s_axi_sqrt_BREADY;
output  [1:0] s_axi_sqrt_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] array_r;
wire   [31:0] ap_return;
reg    output_r_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    output_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln20_reg_240;
wire    output_r_AWREADY;
wire    output_r_WREADY;
reg    output_r_ARVALID;
wire    output_r_ARREADY;
wire   [31:0] output_r_ARADDR;
wire    output_r_RVALID;
reg    output_r_RREADY;
wire   [31:0] output_r_RDATA;
wire    output_r_RLAST;
wire   [0:0] output_r_RID;
wire   [0:0] output_r_RUSER;
wire   [1:0] output_r_RRESP;
wire    output_r_BVALID;
wire   [1:0] output_r_BRESP;
wire   [0:0] output_r_BID;
wire   [0:0] output_r_BUSER;
reg   [4:0] phi_ln20_reg_126;
reg   [4:0] phi_ln20_reg_126_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [24:0] solution_reg_138;
reg   [29:0] array1_reg_229;
wire   [0:0] icmp_ln20_fu_190_p2;
reg   [0:0] icmp_ln20_reg_240_pp0_iter1_reg;
wire   [4:0] add_ln20_fu_196_p2;
reg   [4:0] add_ln20_reg_244;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] output_addr_read_reg_249;
wire   [0:0] tmp_23_fu_207_p3;
reg   [0:0] tmp_23_reg_254;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] grp_CheckPartition_fu_163_ap_return;
reg   [0:0] tmp_1_reg_258;
wire    ap_CS_fsm_pp1_stage14;
wire    ap_block_state27_pp1_stage14_iter0;
wire    ap_block_pp1_stage14_11001;
wire   [24:0] i_fu_215_p2;
reg   [24:0] i_reg_262;
reg    ap_enable_reg_pp1_iter0;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage14_subdone;
reg    ap_predicate_tran28to29_state27;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0_subdone;
reg   [6:0] buff_address0;
reg    buff_ce0;
reg    buff_we0;
wire   [31:0] buff_q0;
reg    buff_ce1;
wire   [31:0] buff_q1;
wire    grp_CheckPartition_fu_163_ap_start;
wire    grp_CheckPartition_fu_163_ap_done;
wire    grp_CheckPartition_fu_163_ap_idle;
wire    grp_CheckPartition_fu_163_ap_ready;
wire   [6:0] grp_CheckPartition_fu_163_array_r_address0;
wire    grp_CheckPartition_fu_163_array_r_ce0;
wire   [6:0] grp_CheckPartition_fu_163_array_r_address1;
wire    grp_CheckPartition_fu_163_array_r_ce1;
reg   [4:0] ap_phi_mux_phi_ln20_phi_fu_130_p4;
reg   [24:0] ap_phi_mux_solution_phi_fu_142_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] p_0_reg_150;
reg    grp_CheckPartition_fu_163_ap_start_reg;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage3;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_pp1_stage4;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_pp1_stage5;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_pp1_stage6;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_pp1_stage7;
wire    ap_CS_fsm_pp1_stage8;
wire    ap_block_pp1_stage8;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_pp1_stage9;
wire    ap_CS_fsm_pp1_stage10;
wire    ap_block_pp1_stage10;
wire    ap_CS_fsm_pp1_stage11;
wire    ap_block_pp1_stage11;
wire    ap_CS_fsm_pp1_stage12;
wire    ap_block_pp1_stage12;
wire    ap_CS_fsm_pp1_stage13;
wire    ap_block_pp1_stage13;
wire    ap_block_pp1_stage14;
wire   [63:0] zext_ln20_fu_202_p1;
wire   [63:0] empty_fu_180_p1;
wire    ap_CS_fsm_state29;
wire  signed [4:0] sext_ln48_fu_221_p1;
reg   [25:0] ap_NS_fsm;
wire    ap_block_state14_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage1_11001;
wire    ap_block_state15_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage2_11001;
wire    ap_block_state16_pp1_stage3_iter0;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp1_stage3_11001;
wire    ap_block_state17_pp1_stage4_iter0;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_pp1_stage4_11001;
wire    ap_block_state18_pp1_stage5_iter0;
wire    ap_block_pp1_stage5_subdone;
wire    ap_block_pp1_stage5_11001;
wire    ap_block_state19_pp1_stage6_iter0;
wire    ap_block_pp1_stage6_subdone;
wire    ap_block_pp1_stage6_11001;
wire    ap_block_state20_pp1_stage7_iter0;
wire    ap_block_pp1_stage7_subdone;
wire    ap_block_pp1_stage7_11001;
wire    ap_block_state21_pp1_stage8_iter0;
wire    ap_block_pp1_stage8_subdone;
wire    ap_block_pp1_stage8_11001;
wire    ap_block_state22_pp1_stage9_iter0;
wire    ap_block_pp1_stage9_subdone;
wire    ap_block_pp1_stage9_11001;
wire    ap_block_state23_pp1_stage10_iter0;
wire    ap_block_pp1_stage10_subdone;
wire    ap_block_pp1_stage10_11001;
wire    ap_block_state24_pp1_stage11_iter0;
wire    ap_block_pp1_stage11_subdone;
wire    ap_block_pp1_stage11_11001;
wire    ap_block_state25_pp1_stage12_iter0;
wire    ap_block_pp1_stage12_subdone;
wire    ap_block_pp1_stage12_11001;
wire    ap_block_state26_pp1_stage13_iter0;
wire    ap_block_pp1_stage13_subdone;
wire    ap_block_pp1_stage13_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_800;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_CheckPartition_fu_163_ap_start_reg = 1'b0;
end

AxiBurst_sqrt_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_SQRT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_SQRT_DATA_WIDTH ))
AxiBurst_sqrt_s_axi_U(
    .AWVALID(s_axi_sqrt_AWVALID),
    .AWREADY(s_axi_sqrt_AWREADY),
    .AWADDR(s_axi_sqrt_AWADDR),
    .WVALID(s_axi_sqrt_WVALID),
    .WREADY(s_axi_sqrt_WREADY),
    .WDATA(s_axi_sqrt_WDATA),
    .WSTRB(s_axi_sqrt_WSTRB),
    .ARVALID(s_axi_sqrt_ARVALID),
    .ARREADY(s_axi_sqrt_ARREADY),
    .ARADDR(s_axi_sqrt_ARADDR),
    .RVALID(s_axi_sqrt_RVALID),
    .RREADY(s_axi_sqrt_RREADY),
    .RDATA(s_axi_sqrt_RDATA),
    .RRESP(s_axi_sqrt_RRESP),
    .BVALID(s_axi_sqrt_BVALID),
    .BREADY(s_axi_sqrt_BREADY),
    .BRESP(s_axi_sqrt_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .array_r(array_r)
);

AxiBurst_output_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_OUTPUT_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_OUTPUT_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_OUTPUT_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_OUTPUT_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_OUTPUT_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_OUTPUT_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_OUTPUT_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_OUTPUT_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_OUTPUT_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_OUTPUT_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_OUTPUT_R_CACHE_VALUE ))
AxiBurst_output_r_m_axi_U(
    .AWVALID(m_axi_output_r_AWVALID),
    .AWREADY(m_axi_output_r_AWREADY),
    .AWADDR(m_axi_output_r_AWADDR),
    .AWID(m_axi_output_r_AWID),
    .AWLEN(m_axi_output_r_AWLEN),
    .AWSIZE(m_axi_output_r_AWSIZE),
    .AWBURST(m_axi_output_r_AWBURST),
    .AWLOCK(m_axi_output_r_AWLOCK),
    .AWCACHE(m_axi_output_r_AWCACHE),
    .AWPROT(m_axi_output_r_AWPROT),
    .AWQOS(m_axi_output_r_AWQOS),
    .AWREGION(m_axi_output_r_AWREGION),
    .AWUSER(m_axi_output_r_AWUSER),
    .WVALID(m_axi_output_r_WVALID),
    .WREADY(m_axi_output_r_WREADY),
    .WDATA(m_axi_output_r_WDATA),
    .WSTRB(m_axi_output_r_WSTRB),
    .WLAST(m_axi_output_r_WLAST),
    .WID(m_axi_output_r_WID),
    .WUSER(m_axi_output_r_WUSER),
    .ARVALID(m_axi_output_r_ARVALID),
    .ARREADY(m_axi_output_r_ARREADY),
    .ARADDR(m_axi_output_r_ARADDR),
    .ARID(m_axi_output_r_ARID),
    .ARLEN(m_axi_output_r_ARLEN),
    .ARSIZE(m_axi_output_r_ARSIZE),
    .ARBURST(m_axi_output_r_ARBURST),
    .ARLOCK(m_axi_output_r_ARLOCK),
    .ARCACHE(m_axi_output_r_ARCACHE),
    .ARPROT(m_axi_output_r_ARPROT),
    .ARQOS(m_axi_output_r_ARQOS),
    .ARREGION(m_axi_output_r_ARREGION),
    .ARUSER(m_axi_output_r_ARUSER),
    .RVALID(m_axi_output_r_RVALID),
    .RREADY(m_axi_output_r_RREADY),
    .RDATA(m_axi_output_r_RDATA),
    .RLAST(m_axi_output_r_RLAST),
    .RID(m_axi_output_r_RID),
    .RUSER(m_axi_output_r_RUSER),
    .RRESP(m_axi_output_r_RRESP),
    .BVALID(m_axi_output_r_BVALID),
    .BREADY(m_axi_output_r_BREADY),
    .BRESP(m_axi_output_r_BRESP),
    .BID(m_axi_output_r_BID),
    .BUSER(m_axi_output_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(output_r_ARVALID),
    .I_ARREADY(output_r_ARREADY),
    .I_ARADDR(output_r_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd25),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(output_r_RVALID),
    .I_RREADY(output_r_RREADY),
    .I_RDATA(output_r_RDATA),
    .I_RID(output_r_RID),
    .I_RUSER(output_r_RUSER),
    .I_RRESP(output_r_RRESP),
    .I_RLAST(output_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(output_r_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(output_r_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(output_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(output_r_BRESP),
    .I_BID(output_r_BID),
    .I_BUSER(output_r_BUSER)
);

AxiBurst_buff #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_address0),
    .ce0(buff_ce0),
    .we0(buff_we0),
    .d0(output_addr_read_reg_249),
    .q0(buff_q0),
    .address1(grp_CheckPartition_fu_163_array_r_address1),
    .ce1(buff_ce1),
    .q1(buff_q1)
);

CheckPartition grp_CheckPartition_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_CheckPartition_fu_163_ap_start),
    .ap_done(grp_CheckPartition_fu_163_ap_done),
    .ap_idle(grp_CheckPartition_fu_163_ap_idle),
    .ap_ready(grp_CheckPartition_fu_163_ap_ready),
    .value_r(solution_reg_138),
    .array_r_address0(grp_CheckPartition_fu_163_array_r_address0),
    .array_r_ce0(grp_CheckPartition_fu_163_array_r_ce0),
    .array_r_q0(buff_q0),
    .array_r_address1(grp_CheckPartition_fu_163_array_r_address1),
    .array_r_ce1(grp_CheckPartition_fu_163_array_r_ce1),
    .array_r_q1(buff_q1),
    .ap_return(grp_CheckPartition_fu_163_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((ap_predicate_tran28to29_state27 == 1'b1) & (1'b0 == ap_block_pp1_stage14_subdone) & (1'b1 == ap_CS_fsm_pp1_stage14))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage14_subdone) & (1'b1 == ap_CS_fsm_pp1_stage14)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_CheckPartition_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_23_fu_207_p3 == 1'd0))) begin
            grp_CheckPartition_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_CheckPartition_fu_163_ap_ready == 1'b1)) begin
            grp_CheckPartition_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        if ((1'b1 == ap_condition_800)) begin
                        p_0_reg_150[0] <= 1'b1;
            p_0_reg_150[1] <= 1'b0;
            p_0_reg_150[2] <= 1'b0;
        end else if (((tmp_23_fu_207_p3 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                        p_0_reg_150[0] <= 1'b0;
            p_0_reg_150[1] <= 1'b1;
            p_0_reg_150[2] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_240 == 1'd0))) begin
        phi_ln20_reg_126 <= add_ln20_reg_244;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln20_reg_126 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        solution_reg_138 <= 25'd1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_1_reg_258 == 1'd0) & (tmp_23_reg_254 == 1'd0))) begin
        solution_reg_138 <= i_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln20_reg_244 <= add_ln20_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        array1_reg_229 <= {{array_r[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage14_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14) & (grp_CheckPartition_fu_163_ap_return == 1'd0) & (tmp_23_reg_254 == 1'd0))) begin
        i_reg_262 <= i_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_reg_240 <= icmp_ln20_fu_190_p2;
        icmp_ln20_reg_240_pp0_iter1_reg <= icmp_ln20_reg_240;
        phi_ln20_reg_126_pp0_iter1_reg <= phi_ln20_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_240 == 1'd0))) begin
        output_addr_read_reg_249 <= output_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage14_11001) & (1'b1 == ap_CS_fsm_pp1_stage14) & (tmp_23_reg_254 == 1'd0))) begin
        tmp_1_reg_258 <= grp_CheckPartition_fu_163_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_23_reg_254 <= ap_phi_mux_solution_phi_fu_142_p4[32'd24];
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_190_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_phi_ln20_phi_fu_130_p4 = add_ln20_reg_244;
    end else begin
        ap_phi_mux_phi_ln20_phi_fu_130_p4 = phi_ln20_reg_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_1_reg_258 == 1'd0) & (tmp_23_reg_254 == 1'd0))) begin
        ap_phi_mux_solution_phi_fu_142_p4 = i_reg_262;
    end else begin
        ap_phi_mux_solution_phi_fu_142_p4 = solution_reg_138;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        buff_address0 = zext_ln20_fu_202_p1;
    end else if ((((1'b0 == ap_block_pp1_stage13) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14) & (tmp_23_reg_254 == 1'd0)))) begin
        buff_address0 = grp_CheckPartition_fu_163_array_r_address0;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buff_ce0 = 1'b1;
    end else if ((((1'b0 == ap_block_pp1_stage13) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14) & (tmp_23_reg_254 == 1'd0)))) begin
        buff_ce0 = grp_CheckPartition_fu_163_array_r_ce0;
    end else begin
        buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage13) & (1'b1 == ap_CS_fsm_pp1_stage13) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage12) & (1'b1 == ap_CS_fsm_pp1_stage12) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage11) & (1'b1 == ap_CS_fsm_pp1_stage11) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage10) & (1'b1 == ap_CS_fsm_pp1_stage10) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage9) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage8) & (1'b1 == ap_CS_fsm_pp1_stage8) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage7) & (1'b1 == ap_CS_fsm_pp1_stage7) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage6) & (1'b1 == ap_CS_fsm_pp1_stage6) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage5) & (1'b1 == ap_CS_fsm_pp1_stage5) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage4) & (1'b1 == ap_CS_fsm_pp1_stage4) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage3) & (1'b1 == ap_CS_fsm_pp1_stage3) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_23_reg_254 == 1'd0)) | ((1'b0 == ap_block_pp1_stage14) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage14) & (tmp_23_reg_254 == 1'd0)))) begin
        buff_ce1 = grp_CheckPartition_fu_163_array_r_ce1;
    end else begin
        buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln20_reg_240_pp0_iter1_reg == 1'd0))) begin
        buff_we0 = 1'b1;
    end else begin
        buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r_ARVALID = 1'b1;
    end else begin
        output_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_240 == 1'd0))) begin
        output_r_RREADY = 1'b1;
    end else begin
        output_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_blk_n_AR = m_axi_output_r_ARREADY;
    end else begin
        output_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_240 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        output_r_blk_n_R = m_axi_output_r_RVALID;
    end else begin
        output_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((output_r_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln20_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln20_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((1'b0 == ap_block_pp1_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_pp1_stage10 : begin
            if ((1'b0 == ap_block_pp1_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage10;
            end
        end
        ap_ST_fsm_pp1_stage11 : begin
            if ((1'b0 == ap_block_pp1_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage11;
            end
        end
        ap_ST_fsm_pp1_stage12 : begin
            if ((1'b0 == ap_block_pp1_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage12;
            end
        end
        ap_ST_fsm_pp1_stage13 : begin
            if ((1'b0 == ap_block_pp1_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage13;
            end
        end
        ap_ST_fsm_pp1_stage14 : begin
            if ((1'b0 == ap_block_pp1_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage14;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_196_p2 = (ap_phi_mux_phi_ln20_phi_fu_130_p4 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage10 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp1_stage11 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp1_stage12 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp1_stage13 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage14 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((output_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln20_reg_240 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((output_r_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln20_reg_240 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((output_r_RVALID == 1'b0) & (icmp_ln20_reg_240 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_800 = ((tmp_1_reg_258 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (tmp_23_reg_254 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran28to29_state27 = ((grp_CheckPartition_fu_163_ap_return == 1'd1) | (tmp_23_reg_254 == 1'd1));
end

assign ap_return = $unsigned(sext_ln48_fu_221_p1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_180_p1 = array1_reg_229;

assign grp_CheckPartition_fu_163_ap_start = grp_CheckPartition_fu_163_ap_start_reg;

assign i_fu_215_p2 = (solution_reg_138 + 25'd1);

assign icmp_ln20_fu_190_p2 = ((ap_phi_mux_phi_ln20_phi_fu_130_p4 == 5'd25) ? 1'b1 : 1'b0);

assign output_r_ARADDR = empty_fu_180_p1;

assign sext_ln48_fu_221_p1 = $signed(p_0_reg_150);

assign tmp_23_fu_207_p3 = ap_phi_mux_solution_phi_fu_142_p4[32'd24];

assign zext_ln20_fu_202_p1 = phi_ln20_reg_126_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    p_0_reg_150[3] <= 1'b1;
end

endmodule //AxiBurst
