// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _PartitionCheckII_HH_
#define _PartitionCheckII_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "PartitionCheckII_bkb.h"
#include "PartitionCheckII_sqrt_s_axi.h"
#include "PartitionCheckII_output_r_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_OUTPUT_R_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_OUTPUT_R_ID_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_DATA_WIDTH = 32,
         unsigned int C_M_AXI_OUTPUT_R_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_OUTPUT_R_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_SQRT_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_SQRT_DATA_WIDTH = 32>
struct PartitionCheckII : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_output_r_AWVALID;
    sc_in< sc_logic > m_axi_output_r_AWREADY;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ADDR_WIDTH> > m_axi_output_r_AWADDR;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_AWID;
    sc_out< sc_lv<8> > m_axi_output_r_AWLEN;
    sc_out< sc_lv<3> > m_axi_output_r_AWSIZE;
    sc_out< sc_lv<2> > m_axi_output_r_AWBURST;
    sc_out< sc_lv<2> > m_axi_output_r_AWLOCK;
    sc_out< sc_lv<4> > m_axi_output_r_AWCACHE;
    sc_out< sc_lv<3> > m_axi_output_r_AWPROT;
    sc_out< sc_lv<4> > m_axi_output_r_AWQOS;
    sc_out< sc_lv<4> > m_axi_output_r_AWREGION;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_AWUSER_WIDTH> > m_axi_output_r_AWUSER;
    sc_out< sc_logic > m_axi_output_r_WVALID;
    sc_in< sc_logic > m_axi_output_r_WREADY;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_DATA_WIDTH> > m_axi_output_r_WDATA;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_DATA_WIDTH/8> > m_axi_output_r_WSTRB;
    sc_out< sc_logic > m_axi_output_r_WLAST;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_WID;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_WUSER_WIDTH> > m_axi_output_r_WUSER;
    sc_out< sc_logic > m_axi_output_r_ARVALID;
    sc_in< sc_logic > m_axi_output_r_ARREADY;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ADDR_WIDTH> > m_axi_output_r_ARADDR;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_ARID;
    sc_out< sc_lv<8> > m_axi_output_r_ARLEN;
    sc_out< sc_lv<3> > m_axi_output_r_ARSIZE;
    sc_out< sc_lv<2> > m_axi_output_r_ARBURST;
    sc_out< sc_lv<2> > m_axi_output_r_ARLOCK;
    sc_out< sc_lv<4> > m_axi_output_r_ARCACHE;
    sc_out< sc_lv<3> > m_axi_output_r_ARPROT;
    sc_out< sc_lv<4> > m_axi_output_r_ARQOS;
    sc_out< sc_lv<4> > m_axi_output_r_ARREGION;
    sc_out< sc_uint<C_M_AXI_OUTPUT_R_ARUSER_WIDTH> > m_axi_output_r_ARUSER;
    sc_in< sc_logic > m_axi_output_r_RVALID;
    sc_out< sc_logic > m_axi_output_r_RREADY;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_DATA_WIDTH> > m_axi_output_r_RDATA;
    sc_in< sc_logic > m_axi_output_r_RLAST;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_RID;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_RUSER_WIDTH> > m_axi_output_r_RUSER;
    sc_in< sc_lv<2> > m_axi_output_r_RRESP;
    sc_in< sc_logic > m_axi_output_r_BVALID;
    sc_out< sc_logic > m_axi_output_r_BREADY;
    sc_in< sc_lv<2> > m_axi_output_r_BRESP;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_ID_WIDTH> > m_axi_output_r_BID;
    sc_in< sc_uint<C_M_AXI_OUTPUT_R_BUSER_WIDTH> > m_axi_output_r_BUSER;
    sc_in< sc_logic > s_axi_sqrt_AWVALID;
    sc_out< sc_logic > s_axi_sqrt_AWREADY;
    sc_in< sc_uint<C_S_AXI_SQRT_ADDR_WIDTH> > s_axi_sqrt_AWADDR;
    sc_in< sc_logic > s_axi_sqrt_WVALID;
    sc_out< sc_logic > s_axi_sqrt_WREADY;
    sc_in< sc_uint<C_S_AXI_SQRT_DATA_WIDTH> > s_axi_sqrt_WDATA;
    sc_in< sc_uint<C_S_AXI_SQRT_DATA_WIDTH/8> > s_axi_sqrt_WSTRB;
    sc_in< sc_logic > s_axi_sqrt_ARVALID;
    sc_out< sc_logic > s_axi_sqrt_ARREADY;
    sc_in< sc_uint<C_S_AXI_SQRT_ADDR_WIDTH> > s_axi_sqrt_ARADDR;
    sc_out< sc_logic > s_axi_sqrt_RVALID;
    sc_in< sc_logic > s_axi_sqrt_RREADY;
    sc_out< sc_uint<C_S_AXI_SQRT_DATA_WIDTH> > s_axi_sqrt_RDATA;
    sc_out< sc_lv<2> > s_axi_sqrt_RRESP;
    sc_out< sc_logic > s_axi_sqrt_BVALID;
    sc_in< sc_logic > s_axi_sqrt_BREADY;
    sc_out< sc_lv<2> > s_axi_sqrt_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const2;
    sc_signal< sc_lv<2> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const4;


    // Module declarations
    PartitionCheckII(sc_module_name name);
    SC_HAS_PROCESS(PartitionCheckII);

    ~PartitionCheckII();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    PartitionCheckII_sqrt_s_axi<C_S_AXI_SQRT_ADDR_WIDTH,C_S_AXI_SQRT_DATA_WIDTH>* PartitionCheckII_sqrt_s_axi_U;
    PartitionCheckII_output_r_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_OUTPUT_R_ID_WIDTH,C_M_AXI_OUTPUT_R_ADDR_WIDTH,C_M_AXI_OUTPUT_R_DATA_WIDTH,C_M_AXI_OUTPUT_R_AWUSER_WIDTH,C_M_AXI_OUTPUT_R_ARUSER_WIDTH,C_M_AXI_OUTPUT_R_WUSER_WIDTH,C_M_AXI_OUTPUT_R_RUSER_WIDTH,C_M_AXI_OUTPUT_R_BUSER_WIDTH,C_M_AXI_OUTPUT_R_USER_VALUE,C_M_AXI_OUTPUT_R_PROT_VALUE,C_M_AXI_OUTPUT_R_CACHE_VALUE>* PartitionCheckII_output_r_m_axi_U;
    PartitionCheckII_bkb* buff_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<24> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > array_r;
    sc_signal< sc_lv<32> > ap_return;
    sc_signal< sc_logic > output_r_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > output_r_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln21_reg_433;
    sc_signal< sc_logic > output_r_AWREADY;
    sc_signal< sc_logic > output_r_WREADY;
    sc_signal< sc_logic > output_r_ARVALID;
    sc_signal< sc_logic > output_r_ARREADY;
    sc_signal< sc_lv<32> > output_r_ARADDR;
    sc_signal< sc_lv<32> > output_r_ARLEN;
    sc_signal< sc_logic > output_r_RVALID;
    sc_signal< sc_logic > output_r_RREADY;
    sc_signal< sc_lv<32> > output_r_RDATA;
    sc_signal< sc_logic > output_r_RLAST;
    sc_signal< sc_lv<1> > output_r_RID;
    sc_signal< sc_lv<1> > output_r_RUSER;
    sc_signal< sc_lv<2> > output_r_RRESP;
    sc_signal< sc_logic > output_r_BVALID;
    sc_signal< sc_lv<2> > output_r_BRESP;
    sc_signal< sc_lv<1> > output_r_BID;
    sc_signal< sc_lv<1> > output_r_BUSER;
    sc_signal< sc_lv<30> > phi_ln21_reg_121;
    sc_signal< sc_lv<30> > phi_ln21_reg_121_pp0_iter1_reg;
    sc_signal< bool > ap_block_state18_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state19_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state20_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > sum0s_0_i_reg_168;
    sc_signal< sc_lv<32> > sum1s_0_i_reg_180;
    sc_signal< sc_lv<32> > mask_0_i_reg_192;
    sc_signal< sc_lv<32> > i_0_i_reg_203;
    sc_signal< sc_lv<30> > array1_reg_404;
    sc_signal< sc_lv<32> > output_addr_reg_409;
    sc_signal< sc_lv<32> > n_reg_415;
    sc_signal< sc_lv<30> > lshr_ln_reg_422;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > zext_ln21_1_fu_267_p1;
    sc_signal< sc_lv<1> > icmp_ln21_fu_271_p2;
    sc_signal< sc_lv<1> > icmp_ln21_reg_433_pp0_iter1_reg;
    sc_signal< sc_lv<30> > add_ln21_1_fu_276_p2;
    sc_signal< sc_lv<30> > add_ln21_1_reg_437;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > output_addr_read_reg_442;
    sc_signal< sc_lv<32> > i_fu_292_p2;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<32> > nPartitions_2_fu_298_p2;
    sc_signal< sc_lv<1> > icmp_ln23_fu_287_p2;
    sc_signal< sc_lv<32> > nPartitions_1_fu_314_p1;
    sc_signal< sc_lv<32> > nPartitions_1_reg_460;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_lv<32> > add_ln57_fu_318_p2;
    sc_signal< sc_lv<32> > add_ln57_reg_465;
    sc_signal< sc_lv<1> > icmp_ln32_fu_323_p2;
    sc_signal< sc_lv<1> > icmp_ln32_reg_470;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_lv<1> > icmp_ln57_fu_328_p2;
    sc_signal< sc_lv<1> > icmp_ln57_reg_474;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state25_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state26_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln59_fu_339_p2;
    sc_signal< sc_lv<1> > icmp_ln59_reg_478;
    sc_signal< sc_lv<32> > mask_fu_350_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<32> > i_1_fu_356_p2;
    sc_signal< sc_lv<32> > sum0s_1_fu_374_p3;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_lv<32> > sum1s_1_fu_381_p3;
    sc_signal< sc_lv<32> > i_2_fu_394_p2;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_lv<1> > icmp_ln68_fu_388_p2;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state18;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state25;
    sc_signal< sc_lv<7> > buff_address0;
    sc_signal< sc_logic > buff_ce0;
    sc_signal< sc_logic > buff_we0;
    sc_signal< sc_lv<32> > buff_q0;
    sc_signal< sc_lv<30> > ap_phi_mux_phi_ln21_phi_fu_125_p4;
    sc_signal< sc_lv<32> > i_0_reg_133;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<32> > nPartitions_0_reg_144;
    sc_signal< sc_lv<32> > solution_reg_156;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > ap_phi_mux_p_0_phi_fu_218_p4;
    sc_signal< sc_lv<1> > p_0_reg_214;
    sc_signal< sc_lv<64> > zext_ln21_fu_282_p1;
    sc_signal< sc_lv<64> > sext_ln63_fu_345_p1;
    sc_signal< sc_lv<64> > empty_fu_236_p1;
    sc_signal< sc_lv<32> > shl_ln21_fu_246_p2;
    sc_signal< sc_lv<32> > add_ln21_fu_251_p2;
    sc_signal< sc_lv<31> > nPartitions_fu_304_p4;
    sc_signal< sc_lv<32> > and_ln59_fu_333_p2;
    sc_signal< sc_lv<32> > sum0s_fu_368_p2;
    sc_signal< sc_lv<32> > sum1s_fu_362_p2;
    sc_signal< sc_lv<24> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<24> ap_ST_fsm_state1;
    static const sc_lv<24> ap_ST_fsm_state2;
    static const sc_lv<24> ap_ST_fsm_state3;
    static const sc_lv<24> ap_ST_fsm_state4;
    static const sc_lv<24> ap_ST_fsm_state5;
    static const sc_lv<24> ap_ST_fsm_state6;
    static const sc_lv<24> ap_ST_fsm_state7;
    static const sc_lv<24> ap_ST_fsm_state8;
    static const sc_lv<24> ap_ST_fsm_state9;
    static const sc_lv<24> ap_ST_fsm_state10;
    static const sc_lv<24> ap_ST_fsm_state11;
    static const sc_lv<24> ap_ST_fsm_state12;
    static const sc_lv<24> ap_ST_fsm_state13;
    static const sc_lv<24> ap_ST_fsm_state14;
    static const sc_lv<24> ap_ST_fsm_state15;
    static const sc_lv<24> ap_ST_fsm_state16;
    static const sc_lv<24> ap_ST_fsm_state17;
    static const sc_lv<24> ap_ST_fsm_pp0_stage0;
    static const sc_lv<24> ap_ST_fsm_state21;
    static const sc_lv<24> ap_ST_fsm_state22;
    static const sc_lv<24> ap_ST_fsm_state23;
    static const sc_lv<24> ap_ST_fsm_state24;
    static const sc_lv<24> ap_ST_fsm_pp2_stage0;
    static const sc_lv<24> ap_ST_fsm_state27;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_11;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_OUTPUT_R_USER_VALUE;
    static const int C_M_AXI_OUTPUT_R_PROT_VALUE;
    static const int C_M_AXI_OUTPUT_R_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<30> ap_const_lv30_0;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<30> ap_const_lv30_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_clk_no_reset_();
    void thread_add_ln21_1_fu_276_p2();
    void thread_add_ln21_fu_251_p2();
    void thread_add_ln57_fu_318_p2();
    void thread_and_ln59_fu_333_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state18_pp0_stage0_iter0();
    void thread_ap_block_state19_pp0_stage0_iter1();
    void thread_ap_block_state20_pp0_stage0_iter2();
    void thread_ap_block_state25_pp2_stage0_iter0();
    void thread_ap_block_state26_pp2_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state18();
    void thread_ap_condition_pp2_exit_iter0_state25();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_p_0_phi_fu_218_p4();
    void thread_ap_phi_mux_phi_ln21_phi_fu_125_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_buff_address0();
    void thread_buff_ce0();
    void thread_buff_we0();
    void thread_empty_fu_236_p1();
    void thread_i_1_fu_356_p2();
    void thread_i_2_fu_394_p2();
    void thread_i_fu_292_p2();
    void thread_icmp_ln21_fu_271_p2();
    void thread_icmp_ln23_fu_287_p2();
    void thread_icmp_ln32_fu_323_p2();
    void thread_icmp_ln57_fu_328_p2();
    void thread_icmp_ln59_fu_339_p2();
    void thread_icmp_ln68_fu_388_p2();
    void thread_mask_fu_350_p2();
    void thread_nPartitions_1_fu_314_p1();
    void thread_nPartitions_2_fu_298_p2();
    void thread_nPartitions_fu_304_p4();
    void thread_output_r_ARADDR();
    void thread_output_r_ARLEN();
    void thread_output_r_ARVALID();
    void thread_output_r_RREADY();
    void thread_output_r_blk_n_AR();
    void thread_output_r_blk_n_R();
    void thread_sext_ln63_fu_345_p1();
    void thread_shl_ln21_fu_246_p2();
    void thread_sum0s_1_fu_374_p3();
    void thread_sum0s_fu_368_p2();
    void thread_sum1s_1_fu_381_p3();
    void thread_sum1s_fu_362_p2();
    void thread_zext_ln21_1_fu_267_p1();
    void thread_zext_ln21_fu_282_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
