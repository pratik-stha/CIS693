// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "PartitionCheckII.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic PartitionCheckII::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic PartitionCheckII::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state1 = "1";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state2 = "10";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state3 = "100";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state4 = "1000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state5 = "10000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state6 = "100000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state7 = "1000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state8 = "10000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state9 = "100000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state10 = "1000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state11 = "10000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state12 = "100000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_pp0_stage0 = "100000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state21 = "1000000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state22 = "10000000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state23 = "100000000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state24 = "1000000000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_pp2_stage0 = "10000000000000000000000";
const sc_lv<24> PartitionCheckII::ap_ST_fsm_state27 = "100000000000000000000000";
const sc_lv<32> PartitionCheckII::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool PartitionCheckII::ap_const_boolean_1 = true;
const sc_lv<32> PartitionCheckII::ap_const_lv32_1 = "1";
const sc_lv<32> PartitionCheckII::ap_const_lv32_8 = "1000";
const sc_lv<32> PartitionCheckII::ap_const_lv32_A = "1010";
const sc_lv<32> PartitionCheckII::ap_const_lv32_11 = "10001";
const bool PartitionCheckII::ap_const_boolean_0 = false;
const sc_lv<1> PartitionCheckII::ap_const_lv1_0 = "0";
const int PartitionCheckII::C_S_AXI_DATA_WIDTH = "100000";
const int PartitionCheckII::C_M_AXI_OUTPUT_R_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int PartitionCheckII::C_M_AXI_OUTPUT_R_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int PartitionCheckII::C_M_AXI_OUTPUT_R_CACHE_VALUE = "11";
const int PartitionCheckII::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> PartitionCheckII::ap_const_lv32_9 = "1001";
const sc_lv<32> PartitionCheckII::ap_const_lv32_13 = "10011";
const sc_lv<32> PartitionCheckII::ap_const_lv32_14 = "10100";
const sc_lv<32> PartitionCheckII::ap_const_lv32_15 = "10101";
const sc_lv<32> PartitionCheckII::ap_const_lv32_16 = "10110";
const sc_lv<32> PartitionCheckII::ap_const_lv32_17 = "10111";
const sc_lv<1> PartitionCheckII::ap_const_lv1_1 = "1";
const sc_lv<32> PartitionCheckII::ap_const_lv32_10 = "10000";
const sc_lv<30> PartitionCheckII::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<32> PartitionCheckII::ap_const_lv32_12 = "10010";
const sc_lv<3> PartitionCheckII::ap_const_lv3_0 = "000";
const sc_lv<2> PartitionCheckII::ap_const_lv2_0 = "00";
const sc_lv<4> PartitionCheckII::ap_const_lv4_0 = "0000";
const sc_lv<32> PartitionCheckII::ap_const_lv32_2 = "10";
const sc_lv<32> PartitionCheckII::ap_const_lv32_1F = "11111";
const sc_lv<32> PartitionCheckII::ap_const_lv32_4 = "100";
const sc_lv<30> PartitionCheckII::ap_const_lv30_1 = "1";

PartitionCheckII::PartitionCheckII(sc_module_name name) : sc_module(name), mVcdFile(0) {
    PartitionCheckII_sqrt_s_axi_U = new PartitionCheckII_sqrt_s_axi<C_S_AXI_SQRT_ADDR_WIDTH,C_S_AXI_SQRT_DATA_WIDTH>("PartitionCheckII_sqrt_s_axi_U");
    PartitionCheckII_sqrt_s_axi_U->AWVALID(s_axi_sqrt_AWVALID);
    PartitionCheckII_sqrt_s_axi_U->AWREADY(s_axi_sqrt_AWREADY);
    PartitionCheckII_sqrt_s_axi_U->AWADDR(s_axi_sqrt_AWADDR);
    PartitionCheckII_sqrt_s_axi_U->WVALID(s_axi_sqrt_WVALID);
    PartitionCheckII_sqrt_s_axi_U->WREADY(s_axi_sqrt_WREADY);
    PartitionCheckII_sqrt_s_axi_U->WDATA(s_axi_sqrt_WDATA);
    PartitionCheckII_sqrt_s_axi_U->WSTRB(s_axi_sqrt_WSTRB);
    PartitionCheckII_sqrt_s_axi_U->ARVALID(s_axi_sqrt_ARVALID);
    PartitionCheckII_sqrt_s_axi_U->ARREADY(s_axi_sqrt_ARREADY);
    PartitionCheckII_sqrt_s_axi_U->ARADDR(s_axi_sqrt_ARADDR);
    PartitionCheckII_sqrt_s_axi_U->RVALID(s_axi_sqrt_RVALID);
    PartitionCheckII_sqrt_s_axi_U->RREADY(s_axi_sqrt_RREADY);
    PartitionCheckII_sqrt_s_axi_U->RDATA(s_axi_sqrt_RDATA);
    PartitionCheckII_sqrt_s_axi_U->RRESP(s_axi_sqrt_RRESP);
    PartitionCheckII_sqrt_s_axi_U->BVALID(s_axi_sqrt_BVALID);
    PartitionCheckII_sqrt_s_axi_U->BREADY(s_axi_sqrt_BREADY);
    PartitionCheckII_sqrt_s_axi_U->BRESP(s_axi_sqrt_BRESP);
    PartitionCheckII_sqrt_s_axi_U->ACLK(ap_clk);
    PartitionCheckII_sqrt_s_axi_U->ARESET(ap_rst_n_inv);
    PartitionCheckII_sqrt_s_axi_U->ACLK_EN(ap_var_for_const0);
    PartitionCheckII_sqrt_s_axi_U->ap_start(ap_start);
    PartitionCheckII_sqrt_s_axi_U->interrupt(interrupt);
    PartitionCheckII_sqrt_s_axi_U->ap_ready(ap_ready);
    PartitionCheckII_sqrt_s_axi_U->ap_done(ap_done);
    PartitionCheckII_sqrt_s_axi_U->ap_idle(ap_idle);
    PartitionCheckII_sqrt_s_axi_U->ap_return(ap_return);
    PartitionCheckII_sqrt_s_axi_U->array_r(array_r);
    PartitionCheckII_output_r_m_axi_U = new PartitionCheckII_output_r_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_OUTPUT_R_ID_WIDTH,C_M_AXI_OUTPUT_R_ADDR_WIDTH,C_M_AXI_OUTPUT_R_DATA_WIDTH,C_M_AXI_OUTPUT_R_AWUSER_WIDTH,C_M_AXI_OUTPUT_R_ARUSER_WIDTH,C_M_AXI_OUTPUT_R_WUSER_WIDTH,C_M_AXI_OUTPUT_R_RUSER_WIDTH,C_M_AXI_OUTPUT_R_BUSER_WIDTH,C_M_AXI_OUTPUT_R_USER_VALUE,C_M_AXI_OUTPUT_R_PROT_VALUE,C_M_AXI_OUTPUT_R_CACHE_VALUE>("PartitionCheckII_output_r_m_axi_U");
    PartitionCheckII_output_r_m_axi_U->AWVALID(m_axi_output_r_AWVALID);
    PartitionCheckII_output_r_m_axi_U->AWREADY(m_axi_output_r_AWREADY);
    PartitionCheckII_output_r_m_axi_U->AWADDR(m_axi_output_r_AWADDR);
    PartitionCheckII_output_r_m_axi_U->AWID(m_axi_output_r_AWID);
    PartitionCheckII_output_r_m_axi_U->AWLEN(m_axi_output_r_AWLEN);
    PartitionCheckII_output_r_m_axi_U->AWSIZE(m_axi_output_r_AWSIZE);
    PartitionCheckII_output_r_m_axi_U->AWBURST(m_axi_output_r_AWBURST);
    PartitionCheckII_output_r_m_axi_U->AWLOCK(m_axi_output_r_AWLOCK);
    PartitionCheckII_output_r_m_axi_U->AWCACHE(m_axi_output_r_AWCACHE);
    PartitionCheckII_output_r_m_axi_U->AWPROT(m_axi_output_r_AWPROT);
    PartitionCheckII_output_r_m_axi_U->AWQOS(m_axi_output_r_AWQOS);
    PartitionCheckII_output_r_m_axi_U->AWREGION(m_axi_output_r_AWREGION);
    PartitionCheckII_output_r_m_axi_U->AWUSER(m_axi_output_r_AWUSER);
    PartitionCheckII_output_r_m_axi_U->WVALID(m_axi_output_r_WVALID);
    PartitionCheckII_output_r_m_axi_U->WREADY(m_axi_output_r_WREADY);
    PartitionCheckII_output_r_m_axi_U->WDATA(m_axi_output_r_WDATA);
    PartitionCheckII_output_r_m_axi_U->WSTRB(m_axi_output_r_WSTRB);
    PartitionCheckII_output_r_m_axi_U->WLAST(m_axi_output_r_WLAST);
    PartitionCheckII_output_r_m_axi_U->WID(m_axi_output_r_WID);
    PartitionCheckII_output_r_m_axi_U->WUSER(m_axi_output_r_WUSER);
    PartitionCheckII_output_r_m_axi_U->ARVALID(m_axi_output_r_ARVALID);
    PartitionCheckII_output_r_m_axi_U->ARREADY(m_axi_output_r_ARREADY);
    PartitionCheckII_output_r_m_axi_U->ARADDR(m_axi_output_r_ARADDR);
    PartitionCheckII_output_r_m_axi_U->ARID(m_axi_output_r_ARID);
    PartitionCheckII_output_r_m_axi_U->ARLEN(m_axi_output_r_ARLEN);
    PartitionCheckII_output_r_m_axi_U->ARSIZE(m_axi_output_r_ARSIZE);
    PartitionCheckII_output_r_m_axi_U->ARBURST(m_axi_output_r_ARBURST);
    PartitionCheckII_output_r_m_axi_U->ARLOCK(m_axi_output_r_ARLOCK);
    PartitionCheckII_output_r_m_axi_U->ARCACHE(m_axi_output_r_ARCACHE);
    PartitionCheckII_output_r_m_axi_U->ARPROT(m_axi_output_r_ARPROT);
    PartitionCheckII_output_r_m_axi_U->ARQOS(m_axi_output_r_ARQOS);
    PartitionCheckII_output_r_m_axi_U->ARREGION(m_axi_output_r_ARREGION);
    PartitionCheckII_output_r_m_axi_U->ARUSER(m_axi_output_r_ARUSER);
    PartitionCheckII_output_r_m_axi_U->RVALID(m_axi_output_r_RVALID);
    PartitionCheckII_output_r_m_axi_U->RREADY(m_axi_output_r_RREADY);
    PartitionCheckII_output_r_m_axi_U->RDATA(m_axi_output_r_RDATA);
    PartitionCheckII_output_r_m_axi_U->RLAST(m_axi_output_r_RLAST);
    PartitionCheckII_output_r_m_axi_U->RID(m_axi_output_r_RID);
    PartitionCheckII_output_r_m_axi_U->RUSER(m_axi_output_r_RUSER);
    PartitionCheckII_output_r_m_axi_U->RRESP(m_axi_output_r_RRESP);
    PartitionCheckII_output_r_m_axi_U->BVALID(m_axi_output_r_BVALID);
    PartitionCheckII_output_r_m_axi_U->BREADY(m_axi_output_r_BREADY);
    PartitionCheckII_output_r_m_axi_U->BRESP(m_axi_output_r_BRESP);
    PartitionCheckII_output_r_m_axi_U->BID(m_axi_output_r_BID);
    PartitionCheckII_output_r_m_axi_U->BUSER(m_axi_output_r_BUSER);
    PartitionCheckII_output_r_m_axi_U->ACLK(ap_clk);
    PartitionCheckII_output_r_m_axi_U->ARESET(ap_rst_n_inv);
    PartitionCheckII_output_r_m_axi_U->ACLK_EN(ap_var_for_const0);
    PartitionCheckII_output_r_m_axi_U->I_ARVALID(output_r_ARVALID);
    PartitionCheckII_output_r_m_axi_U->I_ARREADY(output_r_ARREADY);
    PartitionCheckII_output_r_m_axi_U->I_ARADDR(output_r_ARADDR);
    PartitionCheckII_output_r_m_axi_U->I_ARID(ap_var_for_const1);
    PartitionCheckII_output_r_m_axi_U->I_ARLEN(output_r_ARLEN);
    PartitionCheckII_output_r_m_axi_U->I_ARSIZE(ap_var_for_const2);
    PartitionCheckII_output_r_m_axi_U->I_ARLOCK(ap_var_for_const3);
    PartitionCheckII_output_r_m_axi_U->I_ARCACHE(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_ARQOS(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_ARPROT(ap_var_for_const2);
    PartitionCheckII_output_r_m_axi_U->I_ARUSER(ap_var_for_const1);
    PartitionCheckII_output_r_m_axi_U->I_ARBURST(ap_var_for_const3);
    PartitionCheckII_output_r_m_axi_U->I_ARREGION(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_RVALID(output_r_RVALID);
    PartitionCheckII_output_r_m_axi_U->I_RREADY(output_r_RREADY);
    PartitionCheckII_output_r_m_axi_U->I_RDATA(output_r_RDATA);
    PartitionCheckII_output_r_m_axi_U->I_RID(output_r_RID);
    PartitionCheckII_output_r_m_axi_U->I_RUSER(output_r_RUSER);
    PartitionCheckII_output_r_m_axi_U->I_RRESP(output_r_RRESP);
    PartitionCheckII_output_r_m_axi_U->I_RLAST(output_r_RLAST);
    PartitionCheckII_output_r_m_axi_U->I_AWVALID(ap_var_for_const5);
    PartitionCheckII_output_r_m_axi_U->I_AWREADY(output_r_AWREADY);
    PartitionCheckII_output_r_m_axi_U->I_AWADDR(ap_var_for_const6);
    PartitionCheckII_output_r_m_axi_U->I_AWID(ap_var_for_const1);
    PartitionCheckII_output_r_m_axi_U->I_AWLEN(ap_var_for_const6);
    PartitionCheckII_output_r_m_axi_U->I_AWSIZE(ap_var_for_const2);
    PartitionCheckII_output_r_m_axi_U->I_AWLOCK(ap_var_for_const3);
    PartitionCheckII_output_r_m_axi_U->I_AWCACHE(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_AWQOS(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_AWPROT(ap_var_for_const2);
    PartitionCheckII_output_r_m_axi_U->I_AWUSER(ap_var_for_const1);
    PartitionCheckII_output_r_m_axi_U->I_AWBURST(ap_var_for_const3);
    PartitionCheckII_output_r_m_axi_U->I_AWREGION(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_WVALID(ap_var_for_const5);
    PartitionCheckII_output_r_m_axi_U->I_WREADY(output_r_WREADY);
    PartitionCheckII_output_r_m_axi_U->I_WDATA(ap_var_for_const6);
    PartitionCheckII_output_r_m_axi_U->I_WID(ap_var_for_const1);
    PartitionCheckII_output_r_m_axi_U->I_WUSER(ap_var_for_const1);
    PartitionCheckII_output_r_m_axi_U->I_WLAST(ap_var_for_const5);
    PartitionCheckII_output_r_m_axi_U->I_WSTRB(ap_var_for_const4);
    PartitionCheckII_output_r_m_axi_U->I_BVALID(output_r_BVALID);
    PartitionCheckII_output_r_m_axi_U->I_BREADY(ap_var_for_const5);
    PartitionCheckII_output_r_m_axi_U->I_BRESP(output_r_BRESP);
    PartitionCheckII_output_r_m_axi_U->I_BID(output_r_BID);
    PartitionCheckII_output_r_m_axi_U->I_BUSER(output_r_BUSER);
    buff_U = new PartitionCheckII_bkb("buff_U");
    buff_U->clk(ap_clk);
    buff_U->reset(ap_rst_n_inv);
    buff_U->address0(buff_address0);
    buff_U->ce0(buff_ce0);
    buff_U->we0(buff_we0);
    buff_U->d0(output_addr_read_reg_442);
    buff_U->q0(buff_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln21_1_fu_276_p2);
    sensitive << ( ap_phi_mux_phi_ln21_phi_fu_125_p4 );

    SC_METHOD(thread_add_ln21_fu_251_p2);
    sensitive << ( shl_ln21_fu_246_p2 );

    SC_METHOD(thread_add_ln57_fu_318_p2);
    sensitive << ( n_reg_415 );

    SC_METHOD(thread_and_ln59_fu_333_p2);
    sensitive << ( mask_0_i_reg_192 );
    sensitive << ( solution_reg_156 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln21_reg_433 );
    sensitive << ( output_r_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln21_reg_433 );
    sensitive << ( output_r_RVALID );

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);

    SC_METHOD(thread_ap_block_state18_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter1);
    sensitive << ( icmp_ln21_reg_433 );
    sensitive << ( output_r_RVALID );

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state25_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state26_pp2_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state18);
    sensitive << ( icmp_ln21_fu_271_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state25);
    sensitive << ( icmp_ln57_fu_328_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( icmp_ln32_reg_470 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( icmp_ln68_fu_388_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );

    SC_METHOD(thread_ap_phi_mux_p_0_phi_fu_218_p4);
    sensitive << ( icmp_ln32_reg_470 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( icmp_ln68_fu_388_p2 );
    sensitive << ( p_0_reg_214 );

    SC_METHOD(thread_ap_phi_mux_phi_ln21_phi_fu_125_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln21_reg_433 );
    sensitive << ( phi_ln21_reg_121 );
    sensitive << ( add_ln21_1_reg_437 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( icmp_ln32_reg_470 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( icmp_ln68_fu_388_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( icmp_ln32_reg_470 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( icmp_ln68_fu_388_p2 );
    sensitive << ( ap_phi_mux_p_0_phi_fu_218_p4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_buff_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( zext_ln21_fu_282_p1 );
    sensitive << ( sext_ln63_fu_345_p1 );

    SC_METHOD(thread_buff_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_buff_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln21_reg_433_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_empty_fu_236_p1);
    sensitive << ( array1_reg_404 );

    SC_METHOD(thread_i_1_fu_356_p2);
    sensitive << ( i_0_i_reg_203 );

    SC_METHOD(thread_i_2_fu_394_p2);
    sensitive << ( solution_reg_156 );

    SC_METHOD(thread_i_fu_292_p2);
    sensitive << ( i_0_reg_133 );

    SC_METHOD(thread_icmp_ln21_fu_271_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( lshr_ln_reg_422 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_phi_ln21_phi_fu_125_p4 );

    SC_METHOD(thread_icmp_ln23_fu_287_p2);
    sensitive << ( n_reg_415 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( i_0_reg_133 );

    SC_METHOD(thread_icmp_ln32_fu_323_p2);
    sensitive << ( nPartitions_1_reg_460 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( solution_reg_156 );

    SC_METHOD(thread_icmp_ln57_fu_328_p2);
    sensitive << ( i_0_i_reg_203 );
    sensitive << ( add_ln57_reg_465 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_icmp_ln59_fu_339_p2);
    sensitive << ( icmp_ln57_fu_328_p2 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( and_ln59_fu_333_p2 );

    SC_METHOD(thread_icmp_ln68_fu_388_p2);
    sensitive << ( sum0s_0_i_reg_168 );
    sensitive << ( sum1s_0_i_reg_180 );
    sensitive << ( icmp_ln32_reg_470 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_mask_fu_350_p2);
    sensitive << ( mask_0_i_reg_192 );

    SC_METHOD(thread_nPartitions_1_fu_314_p1);
    sensitive << ( nPartitions_fu_304_p4 );

    SC_METHOD(thread_nPartitions_2_fu_298_p2);
    sensitive << ( nPartitions_0_reg_144 );

    SC_METHOD(thread_nPartitions_fu_304_p4);
    sensitive << ( nPartitions_0_reg_144 );

    SC_METHOD(thread_output_r_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( output_r_ARREADY );
    sensitive << ( output_addr_reg_409 );
    sensitive << ( empty_fu_236_p1 );

    SC_METHOD(thread_output_r_ARLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( output_r_ARREADY );
    sensitive << ( zext_ln21_1_fu_267_p1 );

    SC_METHOD(thread_output_r_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( output_r_ARREADY );

    SC_METHOD(thread_output_r_RREADY);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln21_reg_433 );
    sensitive << ( output_r_RVALID );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_output_r_blk_n_AR);
    sensitive << ( m_axi_output_r_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_output_r_blk_n_R);
    sensitive << ( m_axi_output_r_RVALID );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln21_reg_433 );

    SC_METHOD(thread_sext_ln63_fu_345_p1);
    sensitive << ( i_0_i_reg_203 );

    SC_METHOD(thread_shl_ln21_fu_246_p2);
    sensitive << ( n_reg_415 );

    SC_METHOD(thread_sum0s_1_fu_374_p3);
    sensitive << ( sum0s_0_i_reg_168 );
    sensitive << ( icmp_ln59_reg_478 );
    sensitive << ( sum0s_fu_368_p2 );

    SC_METHOD(thread_sum0s_fu_368_p2);
    sensitive << ( sum0s_0_i_reg_168 );
    sensitive << ( buff_q0 );

    SC_METHOD(thread_sum1s_1_fu_381_p3);
    sensitive << ( sum1s_0_i_reg_180 );
    sensitive << ( icmp_ln59_reg_478 );
    sensitive << ( sum1s_fu_362_p2 );

    SC_METHOD(thread_sum1s_fu_362_p2);
    sensitive << ( sum1s_0_i_reg_180 );
    sensitive << ( buff_q0 );

    SC_METHOD(thread_zext_ln21_1_fu_267_p1);
    sensitive << ( lshr_ln_reg_422 );

    SC_METHOD(thread_zext_ln21_fu_282_p1);
    sensitive << ( phi_ln21_reg_121_pp0_iter1_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( output_r_ARREADY );
    sensitive << ( output_r_RVALID );
    sensitive << ( icmp_ln21_fu_271_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( icmp_ln23_fu_287_p2 );
    sensitive << ( icmp_ln32_fu_323_p2 );
    sensitive << ( icmp_ln32_reg_470 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln57_fu_328_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( icmp_ln68_fu_388_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp2_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    ap_CS_fsm = "000000000000000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "PartitionCheckII_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_output_r_AWVALID, "(port)m_axi_output_r_AWVALID");
    sc_trace(mVcdFile, m_axi_output_r_AWREADY, "(port)m_axi_output_r_AWREADY");
    sc_trace(mVcdFile, m_axi_output_r_AWADDR, "(port)m_axi_output_r_AWADDR");
    sc_trace(mVcdFile, m_axi_output_r_AWID, "(port)m_axi_output_r_AWID");
    sc_trace(mVcdFile, m_axi_output_r_AWLEN, "(port)m_axi_output_r_AWLEN");
    sc_trace(mVcdFile, m_axi_output_r_AWSIZE, "(port)m_axi_output_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_output_r_AWBURST, "(port)m_axi_output_r_AWBURST");
    sc_trace(mVcdFile, m_axi_output_r_AWLOCK, "(port)m_axi_output_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_output_r_AWCACHE, "(port)m_axi_output_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_output_r_AWPROT, "(port)m_axi_output_r_AWPROT");
    sc_trace(mVcdFile, m_axi_output_r_AWQOS, "(port)m_axi_output_r_AWQOS");
    sc_trace(mVcdFile, m_axi_output_r_AWREGION, "(port)m_axi_output_r_AWREGION");
    sc_trace(mVcdFile, m_axi_output_r_AWUSER, "(port)m_axi_output_r_AWUSER");
    sc_trace(mVcdFile, m_axi_output_r_WVALID, "(port)m_axi_output_r_WVALID");
    sc_trace(mVcdFile, m_axi_output_r_WREADY, "(port)m_axi_output_r_WREADY");
    sc_trace(mVcdFile, m_axi_output_r_WDATA, "(port)m_axi_output_r_WDATA");
    sc_trace(mVcdFile, m_axi_output_r_WSTRB, "(port)m_axi_output_r_WSTRB");
    sc_trace(mVcdFile, m_axi_output_r_WLAST, "(port)m_axi_output_r_WLAST");
    sc_trace(mVcdFile, m_axi_output_r_WID, "(port)m_axi_output_r_WID");
    sc_trace(mVcdFile, m_axi_output_r_WUSER, "(port)m_axi_output_r_WUSER");
    sc_trace(mVcdFile, m_axi_output_r_ARVALID, "(port)m_axi_output_r_ARVALID");
    sc_trace(mVcdFile, m_axi_output_r_ARREADY, "(port)m_axi_output_r_ARREADY");
    sc_trace(mVcdFile, m_axi_output_r_ARADDR, "(port)m_axi_output_r_ARADDR");
    sc_trace(mVcdFile, m_axi_output_r_ARID, "(port)m_axi_output_r_ARID");
    sc_trace(mVcdFile, m_axi_output_r_ARLEN, "(port)m_axi_output_r_ARLEN");
    sc_trace(mVcdFile, m_axi_output_r_ARSIZE, "(port)m_axi_output_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_output_r_ARBURST, "(port)m_axi_output_r_ARBURST");
    sc_trace(mVcdFile, m_axi_output_r_ARLOCK, "(port)m_axi_output_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_output_r_ARCACHE, "(port)m_axi_output_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_output_r_ARPROT, "(port)m_axi_output_r_ARPROT");
    sc_trace(mVcdFile, m_axi_output_r_ARQOS, "(port)m_axi_output_r_ARQOS");
    sc_trace(mVcdFile, m_axi_output_r_ARREGION, "(port)m_axi_output_r_ARREGION");
    sc_trace(mVcdFile, m_axi_output_r_ARUSER, "(port)m_axi_output_r_ARUSER");
    sc_trace(mVcdFile, m_axi_output_r_RVALID, "(port)m_axi_output_r_RVALID");
    sc_trace(mVcdFile, m_axi_output_r_RREADY, "(port)m_axi_output_r_RREADY");
    sc_trace(mVcdFile, m_axi_output_r_RDATA, "(port)m_axi_output_r_RDATA");
    sc_trace(mVcdFile, m_axi_output_r_RLAST, "(port)m_axi_output_r_RLAST");
    sc_trace(mVcdFile, m_axi_output_r_RID, "(port)m_axi_output_r_RID");
    sc_trace(mVcdFile, m_axi_output_r_RUSER, "(port)m_axi_output_r_RUSER");
    sc_trace(mVcdFile, m_axi_output_r_RRESP, "(port)m_axi_output_r_RRESP");
    sc_trace(mVcdFile, m_axi_output_r_BVALID, "(port)m_axi_output_r_BVALID");
    sc_trace(mVcdFile, m_axi_output_r_BREADY, "(port)m_axi_output_r_BREADY");
    sc_trace(mVcdFile, m_axi_output_r_BRESP, "(port)m_axi_output_r_BRESP");
    sc_trace(mVcdFile, m_axi_output_r_BID, "(port)m_axi_output_r_BID");
    sc_trace(mVcdFile, m_axi_output_r_BUSER, "(port)m_axi_output_r_BUSER");
    sc_trace(mVcdFile, s_axi_sqrt_AWVALID, "(port)s_axi_sqrt_AWVALID");
    sc_trace(mVcdFile, s_axi_sqrt_AWREADY, "(port)s_axi_sqrt_AWREADY");
    sc_trace(mVcdFile, s_axi_sqrt_AWADDR, "(port)s_axi_sqrt_AWADDR");
    sc_trace(mVcdFile, s_axi_sqrt_WVALID, "(port)s_axi_sqrt_WVALID");
    sc_trace(mVcdFile, s_axi_sqrt_WREADY, "(port)s_axi_sqrt_WREADY");
    sc_trace(mVcdFile, s_axi_sqrt_WDATA, "(port)s_axi_sqrt_WDATA");
    sc_trace(mVcdFile, s_axi_sqrt_WSTRB, "(port)s_axi_sqrt_WSTRB");
    sc_trace(mVcdFile, s_axi_sqrt_ARVALID, "(port)s_axi_sqrt_ARVALID");
    sc_trace(mVcdFile, s_axi_sqrt_ARREADY, "(port)s_axi_sqrt_ARREADY");
    sc_trace(mVcdFile, s_axi_sqrt_ARADDR, "(port)s_axi_sqrt_ARADDR");
    sc_trace(mVcdFile, s_axi_sqrt_RVALID, "(port)s_axi_sqrt_RVALID");
    sc_trace(mVcdFile, s_axi_sqrt_RREADY, "(port)s_axi_sqrt_RREADY");
    sc_trace(mVcdFile, s_axi_sqrt_RDATA, "(port)s_axi_sqrt_RDATA");
    sc_trace(mVcdFile, s_axi_sqrt_RRESP, "(port)s_axi_sqrt_RRESP");
    sc_trace(mVcdFile, s_axi_sqrt_BVALID, "(port)s_axi_sqrt_BVALID");
    sc_trace(mVcdFile, s_axi_sqrt_BREADY, "(port)s_axi_sqrt_BREADY");
    sc_trace(mVcdFile, s_axi_sqrt_BRESP, "(port)s_axi_sqrt_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, array_r, "array_r");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, output_r_blk_n_AR, "output_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, output_r_blk_n_R, "output_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln21_reg_433, "icmp_ln21_reg_433");
    sc_trace(mVcdFile, output_r_AWREADY, "output_r_AWREADY");
    sc_trace(mVcdFile, output_r_WREADY, "output_r_WREADY");
    sc_trace(mVcdFile, output_r_ARVALID, "output_r_ARVALID");
    sc_trace(mVcdFile, output_r_ARREADY, "output_r_ARREADY");
    sc_trace(mVcdFile, output_r_ARADDR, "output_r_ARADDR");
    sc_trace(mVcdFile, output_r_ARLEN, "output_r_ARLEN");
    sc_trace(mVcdFile, output_r_RVALID, "output_r_RVALID");
    sc_trace(mVcdFile, output_r_RREADY, "output_r_RREADY");
    sc_trace(mVcdFile, output_r_RDATA, "output_r_RDATA");
    sc_trace(mVcdFile, output_r_RLAST, "output_r_RLAST");
    sc_trace(mVcdFile, output_r_RID, "output_r_RID");
    sc_trace(mVcdFile, output_r_RUSER, "output_r_RUSER");
    sc_trace(mVcdFile, output_r_RRESP, "output_r_RRESP");
    sc_trace(mVcdFile, output_r_BVALID, "output_r_BVALID");
    sc_trace(mVcdFile, output_r_BRESP, "output_r_BRESP");
    sc_trace(mVcdFile, output_r_BID, "output_r_BID");
    sc_trace(mVcdFile, output_r_BUSER, "output_r_BUSER");
    sc_trace(mVcdFile, phi_ln21_reg_121, "phi_ln21_reg_121");
    sc_trace(mVcdFile, phi_ln21_reg_121_pp0_iter1_reg, "phi_ln21_reg_121_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage0_iter0, "ap_block_state18_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter1, "ap_block_state19_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter2, "ap_block_state20_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, sum0s_0_i_reg_168, "sum0s_0_i_reg_168");
    sc_trace(mVcdFile, sum1s_0_i_reg_180, "sum1s_0_i_reg_180");
    sc_trace(mVcdFile, mask_0_i_reg_192, "mask_0_i_reg_192");
    sc_trace(mVcdFile, i_0_i_reg_203, "i_0_i_reg_203");
    sc_trace(mVcdFile, array1_reg_404, "array1_reg_404");
    sc_trace(mVcdFile, output_addr_reg_409, "output_addr_reg_409");
    sc_trace(mVcdFile, n_reg_415, "n_reg_415");
    sc_trace(mVcdFile, lshr_ln_reg_422, "lshr_ln_reg_422");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, zext_ln21_1_fu_267_p1, "zext_ln21_1_fu_267_p1");
    sc_trace(mVcdFile, icmp_ln21_fu_271_p2, "icmp_ln21_fu_271_p2");
    sc_trace(mVcdFile, icmp_ln21_reg_433_pp0_iter1_reg, "icmp_ln21_reg_433_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln21_1_fu_276_p2, "add_ln21_1_fu_276_p2");
    sc_trace(mVcdFile, add_ln21_1_reg_437, "add_ln21_1_reg_437");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, output_addr_read_reg_442, "output_addr_read_reg_442");
    sc_trace(mVcdFile, i_fu_292_p2, "i_fu_292_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, nPartitions_2_fu_298_p2, "nPartitions_2_fu_298_p2");
    sc_trace(mVcdFile, icmp_ln23_fu_287_p2, "icmp_ln23_fu_287_p2");
    sc_trace(mVcdFile, nPartitions_1_fu_314_p1, "nPartitions_1_fu_314_p1");
    sc_trace(mVcdFile, nPartitions_1_reg_460, "nPartitions_1_reg_460");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, add_ln57_fu_318_p2, "add_ln57_fu_318_p2");
    sc_trace(mVcdFile, add_ln57_reg_465, "add_ln57_reg_465");
    sc_trace(mVcdFile, icmp_ln32_fu_323_p2, "icmp_ln32_fu_323_p2");
    sc_trace(mVcdFile, icmp_ln32_reg_470, "icmp_ln32_reg_470");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, icmp_ln57_fu_328_p2, "icmp_ln57_fu_328_p2");
    sc_trace(mVcdFile, icmp_ln57_reg_474, "icmp_ln57_reg_474");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_block_state25_pp2_stage0_iter0, "ap_block_state25_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state26_pp2_stage0_iter1, "ap_block_state26_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, icmp_ln59_fu_339_p2, "icmp_ln59_fu_339_p2");
    sc_trace(mVcdFile, icmp_ln59_reg_478, "icmp_ln59_reg_478");
    sc_trace(mVcdFile, mask_fu_350_p2, "mask_fu_350_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, i_1_fu_356_p2, "i_1_fu_356_p2");
    sc_trace(mVcdFile, sum0s_1_fu_374_p3, "sum0s_1_fu_374_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, sum1s_1_fu_381_p3, "sum1s_1_fu_381_p3");
    sc_trace(mVcdFile, i_2_fu_394_p2, "i_2_fu_394_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, icmp_ln68_fu_388_p2, "icmp_ln68_fu_388_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state18, "ap_condition_pp0_exit_iter0_state18");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state25, "ap_condition_pp2_exit_iter0_state25");
    sc_trace(mVcdFile, buff_address0, "buff_address0");
    sc_trace(mVcdFile, buff_ce0, "buff_ce0");
    sc_trace(mVcdFile, buff_we0, "buff_we0");
    sc_trace(mVcdFile, buff_q0, "buff_q0");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln21_phi_fu_125_p4, "ap_phi_mux_phi_ln21_phi_fu_125_p4");
    sc_trace(mVcdFile, i_0_reg_133, "i_0_reg_133");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, nPartitions_0_reg_144, "nPartitions_0_reg_144");
    sc_trace(mVcdFile, solution_reg_156, "solution_reg_156");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, ap_phi_mux_p_0_phi_fu_218_p4, "ap_phi_mux_p_0_phi_fu_218_p4");
    sc_trace(mVcdFile, p_0_reg_214, "p_0_reg_214");
    sc_trace(mVcdFile, zext_ln21_fu_282_p1, "zext_ln21_fu_282_p1");
    sc_trace(mVcdFile, sext_ln63_fu_345_p1, "sext_ln63_fu_345_p1");
    sc_trace(mVcdFile, empty_fu_236_p1, "empty_fu_236_p1");
    sc_trace(mVcdFile, shl_ln21_fu_246_p2, "shl_ln21_fu_246_p2");
    sc_trace(mVcdFile, add_ln21_fu_251_p2, "add_ln21_fu_251_p2");
    sc_trace(mVcdFile, nPartitions_fu_304_p4, "nPartitions_fu_304_p4");
    sc_trace(mVcdFile, and_ln59_fu_333_p2, "and_ln59_fu_333_p2");
    sc_trace(mVcdFile, sum0s_fu_368_p2, "sum0s_fu_368_p2");
    sc_trace(mVcdFile, sum1s_fu_362_p2, "sum1s_fu_362_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
#endif

    }
    mHdltvinHandle.open("PartitionCheckII.hdltvin.dat");
    mHdltvoutHandle.open("PartitionCheckII.hdltvout.dat");
}

PartitionCheckII::~PartitionCheckII() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete PartitionCheckII_sqrt_s_axi_U;
    delete PartitionCheckII_output_r_m_axi_U;
    delete buff_U;
}

void PartitionCheckII::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void PartitionCheckII::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_logic_0;
}

void PartitionCheckII::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv32_0;
}

void PartitionCheckII::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void PartitionCheckII::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv3_0;
}

void PartitionCheckII::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void PartitionCheckII::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv4_0;
}

void PartitionCheckII::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state18.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state18.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state18.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state25.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                    esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state25.read()))) {
            ap_enable_reg_pp2_iter1 = (ap_condition_pp2_exit_iter0_state25.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                    esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp2_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_328_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        i_0_i_reg_203 = i_1_fu_356_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_203 = ap_const_lv32_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        i_0_reg_133 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_fu_287_p2.read()))) {
        i_0_reg_133 = i_fu_292_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_328_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        mask_0_i_reg_192 = mask_fu_350_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
        mask_0_i_reg_192 = ap_const_lv32_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        nPartitions_0_reg_144 = ap_const_lv32_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_fu_287_p2.read()))) {
        nPartitions_0_reg_144 = nPartitions_2_fu_298_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_reg_470.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln68_fu_388_p2.read()))) {
        p_0_reg_214 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln32_fu_323_p2.read()))) {
        p_0_reg_214 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        phi_ln21_reg_121 = add_ln21_1_reg_437.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        phi_ln21_reg_121 = ap_const_lv30_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_reg_470.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_388_p2.read()))) {
        solution_reg_156 = i_2_fu_394_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        solution_reg_156 = ap_const_lv32_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_reg_474.read()))) {
        sum0s_0_i_reg_168 = sum0s_1_fu_374_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
        sum0s_0_i_reg_168 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_reg_474.read()))) {
        sum1s_0_i_reg_180 = sum1s_1_fu_381_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
        sum1s_0_i_reg_180 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        add_ln21_1_reg_437 = add_ln21_1_fu_276_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        add_ln57_reg_465 = add_ln57_fu_318_p2.read();
        nPartitions_1_reg_460 = nPartitions_1_fu_314_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        array1_reg_404 = array_r.read().range(31, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln21_reg_433 = icmp_ln21_fu_271_p2.read();
        icmp_ln21_reg_433_pp0_iter1_reg = icmp_ln21_reg_433.read();
        phi_ln21_reg_121_pp0_iter1_reg = phi_ln21_reg_121.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        icmp_ln32_reg_470 = icmp_ln32_fu_323_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln57_reg_474 = icmp_ln57_fu_328_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln57_fu_328_p2.read()))) {
        icmp_ln59_reg_478 = icmp_ln59_fu_339_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        lshr_ln_reg_422 = add_ln21_fu_251_p2.read().range(31, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(output_r_RVALID.read(), ap_const_logic_1))) {
        n_reg_415 = output_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_addr_read_reg_442 = output_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1))) {
        output_addr_reg_409 =  (sc_lv<32>) (empty_fu_236_p1.read());
    }
}

void PartitionCheckII::thread_add_ln21_1_fu_276_p2() {
    add_ln21_1_fu_276_p2 = (!ap_phi_mux_phi_ln21_phi_fu_125_p4.read().is_01() || !ap_const_lv30_1.is_01())? sc_lv<30>(): (sc_biguint<30>(ap_phi_mux_phi_ln21_phi_fu_125_p4.read()) + sc_biguint<30>(ap_const_lv30_1));
}

void PartitionCheckII::thread_add_ln21_fu_251_p2() {
    add_ln21_fu_251_p2 = (!ap_const_lv32_4.is_01() || !shl_ln21_fu_246_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_4) + sc_biguint<32>(shl_ln21_fu_246_p2.read()));
}

void PartitionCheckII::thread_add_ln57_fu_318_p2() {
    add_ln57_fu_318_p2 = (!n_reg_415.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(n_reg_415.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void PartitionCheckII::thread_and_ln59_fu_333_p2() {
    and_ln59_fu_333_p2 = (mask_0_i_reg_192.read() & solution_reg_156.read());
}

void PartitionCheckII::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[17];
}

void PartitionCheckII::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[22];
}

void PartitionCheckII::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void PartitionCheckII::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void PartitionCheckII::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void PartitionCheckII::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void PartitionCheckII::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void PartitionCheckII::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[18];
}

void PartitionCheckII::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[19];
}

void PartitionCheckII::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[20];
}

void PartitionCheckII::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[21];
}

void PartitionCheckII::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[23];
}

void PartitionCheckII::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void PartitionCheckII::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, output_r_RVALID.read()));
}

void PartitionCheckII::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, output_r_RVALID.read()));
}

void PartitionCheckII::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_state18_pp0_stage0_iter0() {
    ap_block_state18_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_state19_pp0_stage0_iter1() {
    ap_block_state19_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, output_r_RVALID.read()));
}

void PartitionCheckII::thread_ap_block_state20_pp0_stage0_iter2() {
    ap_block_state20_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_state25_pp2_stage0_iter0() {
    ap_block_state25_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_block_state26_pp2_stage0_iter1() {
    ap_block_state26_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void PartitionCheckII::thread_ap_condition_pp0_exit_iter0_state18() {
    if (esl_seteq<1,1,1>(icmp_ln21_fu_271_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state18 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state18 = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_condition_pp2_exit_iter0_state25() {
    if (esl_seteq<1,1,1>(icmp_ln57_fu_328_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp2_exit_iter0_state25 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state25 = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln68_fu_388_p2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln32_reg_470.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void PartitionCheckII::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void PartitionCheckII::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_phi_mux_p_0_phi_fu_218_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         esl_seteq<1,1,1>(icmp_ln32_reg_470.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln68_fu_388_p2.read()))) {
        ap_phi_mux_p_0_phi_fu_218_p4 = ap_const_lv1_1;
    } else {
        ap_phi_mux_p_0_phi_fu_218_p4 = p_0_reg_214.read();
    }
}

void PartitionCheckII::thread_ap_phi_mux_phi_ln21_phi_fu_125_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0))) {
        ap_phi_mux_phi_ln21_phi_fu_125_p4 = add_ln21_1_reg_437.read();
    } else {
        ap_phi_mux_phi_ln21_phi_fu_125_p4 = phi_ln21_reg_121.read();
    }
}

void PartitionCheckII::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln68_fu_388_p2.read()) || 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln32_reg_470.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_ap_return() {
    ap_return = esl_zext<32,1>(ap_phi_mux_p_0_phi_fu_218_p4.read());
}

void PartitionCheckII::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void PartitionCheckII::thread_buff_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        buff_address0 =  (sc_lv<7>) (sext_ln63_fu_345_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        buff_address0 =  (sc_lv<7>) (zext_ln21_fu_282_p1.read());
    } else {
        buff_address0 = "XXXXXXX";
    }
}

void PartitionCheckII::thread_buff_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        buff_ce0 = ap_const_logic_1;
    } else {
        buff_ce0 = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_buff_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln21_reg_433_pp0_iter1_reg.read()))) {
        buff_we0 = ap_const_logic_1;
    } else {
        buff_we0 = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_empty_fu_236_p1() {
    empty_fu_236_p1 = esl_zext<64,30>(array1_reg_404.read());
}

void PartitionCheckII::thread_i_1_fu_356_p2() {
    i_1_fu_356_p2 = (!ap_const_lv32_1.is_01() || !i_0_i_reg_203.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_bigint<32>(i_0_i_reg_203.read()));
}

void PartitionCheckII::thread_i_2_fu_394_p2() {
    i_2_fu_394_p2 = (!solution_reg_156.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(solution_reg_156.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void PartitionCheckII::thread_i_fu_292_p2() {
    i_fu_292_p2 = (!i_0_reg_133.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_reg_133.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void PartitionCheckII::thread_icmp_ln21_fu_271_p2() {
    icmp_ln21_fu_271_p2 = (!ap_phi_mux_phi_ln21_phi_fu_125_p4.read().is_01() || !lshr_ln_reg_422.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_phi_ln21_phi_fu_125_p4.read() == lshr_ln_reg_422.read());
}

void PartitionCheckII::thread_icmp_ln23_fu_287_p2() {
    icmp_ln23_fu_287_p2 = (!i_0_reg_133.read().is_01() || !n_reg_415.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_133.read() == n_reg_415.read());
}

void PartitionCheckII::thread_icmp_ln32_fu_323_p2() {
    icmp_ln32_fu_323_p2 = (!solution_reg_156.read().is_01() || !nPartitions_1_reg_460.read().is_01())? sc_lv<1>(): (sc_biguint<32>(solution_reg_156.read()) < sc_biguint<32>(nPartitions_1_reg_460.read()));
}

void PartitionCheckII::thread_icmp_ln57_fu_328_p2() {
    icmp_ln57_fu_328_p2 = (!i_0_i_reg_203.read().is_01() || !add_ln57_reg_465.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_203.read() == add_ln57_reg_465.read());
}

void PartitionCheckII::thread_icmp_ln59_fu_339_p2() {
    icmp_ln59_fu_339_p2 = (!and_ln59_fu_333_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(and_ln59_fu_333_p2.read() == ap_const_lv32_0);
}

void PartitionCheckII::thread_icmp_ln68_fu_388_p2() {
    icmp_ln68_fu_388_p2 = (!sum0s_0_i_reg_168.read().is_01() || !sum1s_0_i_reg_180.read().is_01())? sc_lv<1>(): sc_lv<1>(sum0s_0_i_reg_168.read() == sum1s_0_i_reg_180.read());
}

void PartitionCheckII::thread_mask_fu_350_p2() {
    mask_fu_350_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): mask_0_i_reg_192.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void PartitionCheckII::thread_nPartitions_1_fu_314_p1() {
    nPartitions_1_fu_314_p1 = esl_zext<32,31>(nPartitions_fu_304_p4.read());
}

void PartitionCheckII::thread_nPartitions_2_fu_298_p2() {
    nPartitions_2_fu_298_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): nPartitions_0_reg_144.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void PartitionCheckII::thread_nPartitions_fu_304_p4() {
    nPartitions_fu_304_p4 = nPartitions_0_reg_144.read().range(31, 1);
}

void PartitionCheckII::thread_output_r_ARADDR() {
    if (esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            output_r_ARADDR = output_addr_reg_409.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            output_r_ARADDR =  (sc_lv<32>) (empty_fu_236_p1.read());
        } else {
            output_r_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        output_r_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void PartitionCheckII::thread_output_r_ARLEN() {
    if (esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            output_r_ARLEN = zext_ln21_1_fu_267_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            output_r_ARLEN = ap_const_lv32_1;
        } else {
            output_r_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        output_r_ARLEN =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void PartitionCheckII::thread_output_r_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1)))) {
        output_r_ARVALID = ap_const_logic_1;
    } else {
        output_r_ARVALID = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_output_r_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(output_r_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        output_r_RREADY = ap_const_logic_1;
    } else {
        output_r_RREADY = ap_const_logic_0;
    }
}

void PartitionCheckII::thread_output_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        output_r_blk_n_AR = m_axi_output_r_ARREADY.read();
    } else {
        output_r_blk_n_AR = ap_const_logic_1;
    }
}

void PartitionCheckII::thread_output_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln21_reg_433.read(), ap_const_lv1_0)))) {
        output_r_blk_n_R = m_axi_output_r_RVALID.read();
    } else {
        output_r_blk_n_R = ap_const_logic_1;
    }
}

void PartitionCheckII::thread_sext_ln63_fu_345_p1() {
    sext_ln63_fu_345_p1 = esl_sext<64,32>(i_0_i_reg_203.read());
}

void PartitionCheckII::thread_shl_ln21_fu_246_p2() {
    shl_ln21_fu_246_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): n_reg_415.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void PartitionCheckII::thread_sum0s_1_fu_374_p3() {
    sum0s_1_fu_374_p3 = (!icmp_ln59_reg_478.read()[0].is_01())? sc_lv<32>(): ((icmp_ln59_reg_478.read()[0].to_bool())? sum0s_fu_368_p2.read(): sum0s_0_i_reg_168.read());
}

void PartitionCheckII::thread_sum0s_fu_368_p2() {
    sum0s_fu_368_p2 = (!buff_q0.read().is_01() || !sum0s_0_i_reg_168.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buff_q0.read()) + sc_biguint<32>(sum0s_0_i_reg_168.read()));
}

void PartitionCheckII::thread_sum1s_1_fu_381_p3() {
    sum1s_1_fu_381_p3 = (!icmp_ln59_reg_478.read()[0].is_01())? sc_lv<32>(): ((icmp_ln59_reg_478.read()[0].to_bool())? sum1s_0_i_reg_180.read(): sum1s_fu_362_p2.read());
}

void PartitionCheckII::thread_sum1s_fu_362_p2() {
    sum1s_fu_362_p2 = (!buff_q0.read().is_01() || !sum1s_0_i_reg_180.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buff_q0.read()) + sc_biguint<32>(sum1s_0_i_reg_180.read()));
}

void PartitionCheckII::thread_zext_ln21_1_fu_267_p1() {
    zext_ln21_1_fu_267_p1 = esl_zext<32,30>(lshr_ln_reg_422.read());
}

void PartitionCheckII::thread_zext_ln21_fu_282_p1() {
    zext_ln21_fu_282_p1 = esl_zext<64,30>(phi_ln21_reg_121_pp0_iter1_reg.read());
}

void PartitionCheckII::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(output_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(output_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 131072 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln21_fu_271_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln21_fu_271_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_fu_287_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(icmp_ln32_fu_323_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 4194304 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln57_fu_328_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln57_fu_328_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln68_fu_388_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln32_reg_470.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<24>) ("XXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void PartitionCheckII::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_output_r_AWVALID\" :  \"" << m_axi_output_r_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_AWREADY\" :  \"" << m_axi_output_r_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWADDR\" :  \"" << m_axi_output_r_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWID\" :  \"" << m_axi_output_r_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWLEN\" :  \"" << m_axi_output_r_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWSIZE\" :  \"" << m_axi_output_r_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWBURST\" :  \"" << m_axi_output_r_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWLOCK\" :  \"" << m_axi_output_r_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWCACHE\" :  \"" << m_axi_output_r_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWPROT\" :  \"" << m_axi_output_r_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWQOS\" :  \"" << m_axi_output_r_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWREGION\" :  \"" << m_axi_output_r_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_AWUSER\" :  \"" << m_axi_output_r_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WVALID\" :  \"" << m_axi_output_r_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_WREADY\" :  \"" << m_axi_output_r_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WDATA\" :  \"" << m_axi_output_r_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WSTRB\" :  \"" << m_axi_output_r_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WLAST\" :  \"" << m_axi_output_r_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WID\" :  \"" << m_axi_output_r_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_WUSER\" :  \"" << m_axi_output_r_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARVALID\" :  \"" << m_axi_output_r_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_ARREADY\" :  \"" << m_axi_output_r_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARADDR\" :  \"" << m_axi_output_r_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARID\" :  \"" << m_axi_output_r_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARLEN\" :  \"" << m_axi_output_r_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARSIZE\" :  \"" << m_axi_output_r_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARBURST\" :  \"" << m_axi_output_r_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARLOCK\" :  \"" << m_axi_output_r_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARCACHE\" :  \"" << m_axi_output_r_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARPROT\" :  \"" << m_axi_output_r_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARQOS\" :  \"" << m_axi_output_r_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARREGION\" :  \"" << m_axi_output_r_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_ARUSER\" :  \"" << m_axi_output_r_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RVALID\" :  \"" << m_axi_output_r_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_RREADY\" :  \"" << m_axi_output_r_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RDATA\" :  \"" << m_axi_output_r_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RLAST\" :  \"" << m_axi_output_r_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RID\" :  \"" << m_axi_output_r_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RUSER\" :  \"" << m_axi_output_r_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_RRESP\" :  \"" << m_axi_output_r_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BVALID\" :  \"" << m_axi_output_r_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_output_r_BREADY\" :  \"" << m_axi_output_r_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BRESP\" :  \"" << m_axi_output_r_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BID\" :  \"" << m_axi_output_r_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_output_r_BUSER\" :  \"" << m_axi_output_r_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_AWVALID\" :  \"" << s_axi_sqrt_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_AWREADY\" :  \"" << s_axi_sqrt_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_AWADDR\" :  \"" << s_axi_sqrt_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_WVALID\" :  \"" << s_axi_sqrt_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_WREADY\" :  \"" << s_axi_sqrt_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_WDATA\" :  \"" << s_axi_sqrt_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_WSTRB\" :  \"" << s_axi_sqrt_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_ARVALID\" :  \"" << s_axi_sqrt_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_ARREADY\" :  \"" << s_axi_sqrt_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_ARADDR\" :  \"" << s_axi_sqrt_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_RVALID\" :  \"" << s_axi_sqrt_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_RREADY\" :  \"" << s_axi_sqrt_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_RDATA\" :  \"" << s_axi_sqrt_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_RRESP\" :  \"" << s_axi_sqrt_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_BVALID\" :  \"" << s_axi_sqrt_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_sqrt_BREADY\" :  \"" << s_axi_sqrt_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_sqrt_BRESP\" :  \"" << s_axi_sqrt_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

