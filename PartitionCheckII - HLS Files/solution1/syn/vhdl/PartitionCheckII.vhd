-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PartitionCheckII is
generic (
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_SQRT_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_SQRT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_output_r_AWVALID : OUT STD_LOGIC;
    m_axi_output_r_AWREADY : IN STD_LOGIC;
    m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_output_r_WVALID : OUT STD_LOGIC;
    m_axi_output_r_WREADY : IN STD_LOGIC;
    m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_output_r_WLAST : OUT STD_LOGIC;
    m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_output_r_ARVALID : OUT STD_LOGIC;
    m_axi_output_r_ARREADY : IN STD_LOGIC;
    m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_output_r_RVALID : IN STD_LOGIC;
    m_axi_output_r_RREADY : OUT STD_LOGIC;
    m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_output_r_RLAST : IN STD_LOGIC;
    m_axi_output_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BVALID : IN STD_LOGIC;
    m_axi_output_r_BREADY : OUT STD_LOGIC;
    m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_sqrt_AWVALID : IN STD_LOGIC;
    s_axi_sqrt_AWREADY : OUT STD_LOGIC;
    s_axi_sqrt_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_ADDR_WIDTH-1 downto 0);
    s_axi_sqrt_WVALID : IN STD_LOGIC;
    s_axi_sqrt_WREADY : OUT STD_LOGIC;
    s_axi_sqrt_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_DATA_WIDTH-1 downto 0);
    s_axi_sqrt_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_DATA_WIDTH/8-1 downto 0);
    s_axi_sqrt_ARVALID : IN STD_LOGIC;
    s_axi_sqrt_ARREADY : OUT STD_LOGIC;
    s_axi_sqrt_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SQRT_ADDR_WIDTH-1 downto 0);
    s_axi_sqrt_RVALID : OUT STD_LOGIC;
    s_axi_sqrt_RREADY : IN STD_LOGIC;
    s_axi_sqrt_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_SQRT_DATA_WIDTH-1 downto 0);
    s_axi_sqrt_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_sqrt_BVALID : OUT STD_LOGIC;
    s_axi_sqrt_BREADY : IN STD_LOGIC;
    s_axi_sqrt_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of PartitionCheckII is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PartitionCheckII,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1184,HLS_SYN_LUT=1577,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal array_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal output_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln21_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_AWREADY : STD_LOGIC;
    signal output_r_WREADY : STD_LOGIC;
    signal output_r_ARVALID : STD_LOGIC;
    signal output_r_ARREADY : STD_LOGIC;
    signal output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_RVALID : STD_LOGIC;
    signal output_r_RREADY : STD_LOGIC;
    signal output_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_RLAST : STD_LOGIC;
    signal output_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal output_r_BVALID : STD_LOGIC;
    signal output_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal output_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal output_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln21_reg_121 : STD_LOGIC_VECTOR (29 downto 0);
    signal phi_ln21_reg_121_pp0_iter1_reg : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state18_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sum0s_0_i_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1s_0_i_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_0_i_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal array1_reg_404 : STD_LOGIC_VECTOR (29 downto 0);
    signal output_addr_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_reg_422 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln21_1_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_433_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_1_fu_276_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln21_1_reg_437 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_addr_read_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal nPartitions_2_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nPartitions_1_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal nPartitions_1_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln57_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln57_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state25_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln59_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal i_1_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum0s_1_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal sum1s_1_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln68_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state25 : STD_LOGIC;
    signal buff_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln21_phi_fu_125_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_0_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal nPartitions_0_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal solution_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_p_0_phi_fu_218_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln21_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln21_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nPartitions_fu_304_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln59_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum0s_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1s_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component PartitionCheckII_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PartitionCheckII_sqrt_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        array_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component PartitionCheckII_output_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    PartitionCheckII_sqrt_s_axi_U : component PartitionCheckII_sqrt_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_SQRT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_SQRT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_sqrt_AWVALID,
        AWREADY => s_axi_sqrt_AWREADY,
        AWADDR => s_axi_sqrt_AWADDR,
        WVALID => s_axi_sqrt_WVALID,
        WREADY => s_axi_sqrt_WREADY,
        WDATA => s_axi_sqrt_WDATA,
        WSTRB => s_axi_sqrt_WSTRB,
        ARVALID => s_axi_sqrt_ARVALID,
        ARREADY => s_axi_sqrt_ARREADY,
        ARADDR => s_axi_sqrt_ARADDR,
        RVALID => s_axi_sqrt_RVALID,
        RREADY => s_axi_sqrt_RREADY,
        RDATA => s_axi_sqrt_RDATA,
        RRESP => s_axi_sqrt_RRESP,
        BVALID => s_axi_sqrt_BVALID,
        BREADY => s_axi_sqrt_BREADY,
        BRESP => s_axi_sqrt_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        array_r => array_r);

    PartitionCheckII_output_r_m_axi_U : component PartitionCheckII_output_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_output_r_AWVALID,
        AWREADY => m_axi_output_r_AWREADY,
        AWADDR => m_axi_output_r_AWADDR,
        AWID => m_axi_output_r_AWID,
        AWLEN => m_axi_output_r_AWLEN,
        AWSIZE => m_axi_output_r_AWSIZE,
        AWBURST => m_axi_output_r_AWBURST,
        AWLOCK => m_axi_output_r_AWLOCK,
        AWCACHE => m_axi_output_r_AWCACHE,
        AWPROT => m_axi_output_r_AWPROT,
        AWQOS => m_axi_output_r_AWQOS,
        AWREGION => m_axi_output_r_AWREGION,
        AWUSER => m_axi_output_r_AWUSER,
        WVALID => m_axi_output_r_WVALID,
        WREADY => m_axi_output_r_WREADY,
        WDATA => m_axi_output_r_WDATA,
        WSTRB => m_axi_output_r_WSTRB,
        WLAST => m_axi_output_r_WLAST,
        WID => m_axi_output_r_WID,
        WUSER => m_axi_output_r_WUSER,
        ARVALID => m_axi_output_r_ARVALID,
        ARREADY => m_axi_output_r_ARREADY,
        ARADDR => m_axi_output_r_ARADDR,
        ARID => m_axi_output_r_ARID,
        ARLEN => m_axi_output_r_ARLEN,
        ARSIZE => m_axi_output_r_ARSIZE,
        ARBURST => m_axi_output_r_ARBURST,
        ARLOCK => m_axi_output_r_ARLOCK,
        ARCACHE => m_axi_output_r_ARCACHE,
        ARPROT => m_axi_output_r_ARPROT,
        ARQOS => m_axi_output_r_ARQOS,
        ARREGION => m_axi_output_r_ARREGION,
        ARUSER => m_axi_output_r_ARUSER,
        RVALID => m_axi_output_r_RVALID,
        RREADY => m_axi_output_r_RREADY,
        RDATA => m_axi_output_r_RDATA,
        RLAST => m_axi_output_r_RLAST,
        RID => m_axi_output_r_RID,
        RUSER => m_axi_output_r_RUSER,
        RRESP => m_axi_output_r_RRESP,
        BVALID => m_axi_output_r_BVALID,
        BREADY => m_axi_output_r_BREADY,
        BRESP => m_axi_output_r_BRESP,
        BID => m_axi_output_r_BID,
        BUSER => m_axi_output_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => output_r_ARVALID,
        I_ARREADY => output_r_ARREADY,
        I_ARADDR => output_r_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => output_r_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => output_r_RVALID,
        I_RREADY => output_r_RREADY,
        I_RDATA => output_r_RDATA,
        I_RID => output_r_RID,
        I_RUSER => output_r_RUSER,
        I_RRESP => output_r_RRESP,
        I_RLAST => output_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => output_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => output_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => output_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => output_r_BRESP,
        I_BID => output_r_BID,
        I_BUSER => output_r_BUSER);

    buff_U : component PartitionCheckII_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => output_addr_read_reg_442,
        q0 => buff_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state18)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state25);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_fu_328_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_203 <= i_1_fu_356_p2;
            elsif (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_0_i_reg_203 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    i_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_0_reg_133 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln23_fu_287_p2 = ap_const_lv1_0))) then 
                i_0_reg_133 <= i_fu_292_p2;
            end if; 
        end if;
    end process;

    mask_0_i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_fu_328_p2 = ap_const_lv1_0))) then 
                mask_0_i_reg_192 <= mask_fu_350_p2;
            elsif (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                mask_0_i_reg_192 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    nPartitions_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                nPartitions_0_reg_144 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln23_fu_287_p2 = ap_const_lv1_0))) then 
                nPartitions_0_reg_144 <= nPartitions_2_fu_298_p2;
            end if; 
        end if;
    end process;

    p_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_388_p2 = ap_const_lv1_1) and (icmp_ln32_reg_470 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                p_0_reg_214 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln32_fu_323_p2 = ap_const_lv1_0))) then 
                p_0_reg_214 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    phi_ln21_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_433 = ap_const_lv1_0))) then 
                phi_ln21_reg_121 <= add_ln21_1_reg_437;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_ln21_reg_121 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    solution_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_470 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln68_fu_388_p2 = ap_const_lv1_0))) then 
                solution_reg_156 <= i_2_fu_394_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                solution_reg_156 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    sum0s_0_i_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_reg_474 = ap_const_lv1_0))) then 
                sum0s_0_i_reg_168 <= sum0s_1_fu_374_p3;
            elsif (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                sum0s_0_i_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum1s_0_i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_reg_474 = ap_const_lv1_0))) then 
                sum1s_0_i_reg_180 <= sum1s_1_fu_381_p3;
            elsif (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                sum1s_0_i_reg_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln21_1_reg_437 <= add_ln21_1_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                add_ln57_reg_465 <= add_ln57_fu_318_p2;
                    nPartitions_1_reg_460(30 downto 0) <= nPartitions_1_fu_314_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                array1_reg_404 <= array_r(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln21_reg_433 <= icmp_ln21_fu_271_p2;
                icmp_ln21_reg_433_pp0_iter1_reg <= icmp_ln21_reg_433;
                phi_ln21_reg_121_pp0_iter1_reg <= phi_ln21_reg_121;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                icmp_ln32_reg_470 <= icmp_ln32_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln57_reg_474 <= icmp_ln57_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_fu_328_p2 = ap_const_lv1_0))) then
                icmp_ln59_reg_478 <= icmp_ln59_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                lshr_ln_reg_422 <= add_ln21_fu_251_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                n_reg_415 <= output_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_433 = ap_const_lv1_0))) then
                output_addr_read_reg_442 <= output_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    output_addr_reg_409(29 downto 0) <= empty_fu_236_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    output_addr_reg_409(31 downto 30) <= "00";
    nPartitions_1_reg_460(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_enable_reg_pp0_iter1, output_r_ARREADY, output_r_RVALID, icmp_ln21_fu_271_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state22, icmp_ln23_fu_287_p2, icmp_ln32_fu_323_p2, icmp_ln32_reg_470, ap_CS_fsm_state24, icmp_ln57_fu_328_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state27, icmp_ln68_fu_388_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln21_fu_271_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln21_fu_271_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln23_fu_287_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln32_fu_323_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln57_fu_328_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln57_fu_328_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln68_fu_388_p2 = ap_const_lv1_1) or (icmp_ln32_reg_470 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln21_1_fu_276_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln21_phi_fu_125_p4) + unsigned(ap_const_lv30_1));
    add_ln21_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(shl_ln21_fu_246_p2));
    add_ln57_fu_318_p2 <= std_logic_vector(unsigned(n_reg_415) + unsigned(ap_const_lv32_1));
    and_ln59_fu_333_p2 <= (solution_reg_156 and mask_0_i_reg_192);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln21_reg_433, output_r_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((output_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln21_reg_433 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln21_reg_433, output_r_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((output_r_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln21_reg_433 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter1_assign_proc : process(icmp_ln21_reg_433, output_r_RVALID)
    begin
                ap_block_state19_pp0_stage0_iter1 <= ((output_r_RVALID = ap_const_logic_0) and (icmp_ln21_reg_433 = ap_const_lv1_0));
    end process;

        ap_block_state20_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state18_assign_proc : process(icmp_ln21_fu_271_p2)
    begin
        if ((icmp_ln21_fu_271_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state25_assign_proc : process(icmp_ln57_fu_328_p2)
    begin
        if ((icmp_ln57_fu_328_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln32_reg_470, ap_CS_fsm_state27, icmp_ln68_fu_388_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln68_fu_388_p2 = ap_const_lv1_1) or (icmp_ln32_reg_470 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_218_p4_assign_proc : process(icmp_ln32_reg_470, ap_CS_fsm_state27, icmp_ln68_fu_388_p2, p_0_reg_214)
    begin
        if (((icmp_ln68_fu_388_p2 = ap_const_lv1_1) and (icmp_ln32_reg_470 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_phi_mux_p_0_phi_fu_218_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_p_0_phi_fu_218_p4 <= p_0_reg_214;
        end if; 
    end process;


    ap_phi_mux_phi_ln21_phi_fu_125_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln21_reg_433, phi_ln21_reg_121, add_ln21_1_reg_437)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_433 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_phi_ln21_phi_fu_125_p4 <= add_ln21_1_reg_437;
        else 
            ap_phi_mux_phi_ln21_phi_fu_125_p4 <= phi_ln21_reg_121;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln32_reg_470, ap_CS_fsm_state27, icmp_ln68_fu_388_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln68_fu_388_p2 = ap_const_lv1_1) or (icmp_ln32_reg_470 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_phi_fu_218_p4),32));

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buff_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, zext_ln21_fu_282_p1, sext_ln63_fu_345_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            buff_address0 <= sext_ln63_fu_345_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            buff_address0 <= zext_ln21_fu_282_p1(7 - 1 downto 0);
        else 
            buff_address0 <= "XXXXXXX";
        end if; 
    end process;


    buff_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln21_reg_433_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln21_reg_433_pp0_iter1_reg = ap_const_lv1_0))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(array1_reg_404),64));
    i_1_fu_356_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_0_i_reg_203));
    i_2_fu_394_p2 <= std_logic_vector(unsigned(solution_reg_156) + unsigned(ap_const_lv32_1));
    i_fu_292_p2 <= std_logic_vector(unsigned(i_0_reg_133) + unsigned(ap_const_lv32_1));
    icmp_ln21_fu_271_p2 <= "1" when (ap_phi_mux_phi_ln21_phi_fu_125_p4 = lshr_ln_reg_422) else "0";
    icmp_ln23_fu_287_p2 <= "1" when (i_0_reg_133 = n_reg_415) else "0";
    icmp_ln32_fu_323_p2 <= "1" when (unsigned(solution_reg_156) < unsigned(nPartitions_1_reg_460)) else "0";
    icmp_ln57_fu_328_p2 <= "1" when (i_0_i_reg_203 = add_ln57_reg_465) else "0";
    icmp_ln59_fu_339_p2 <= "1" when (and_ln59_fu_333_p2 = ap_const_lv32_0) else "0";
    icmp_ln68_fu_388_p2 <= "1" when (sum0s_0_i_reg_168 = sum1s_0_i_reg_180) else "0";
    mask_fu_350_p2 <= std_logic_vector(shift_left(unsigned(mask_0_i_reg_192),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    nPartitions_1_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nPartitions_fu_304_p4),32));
    nPartitions_2_fu_298_p2 <= std_logic_vector(shift_left(unsigned(nPartitions_0_reg_144),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    nPartitions_fu_304_p4 <= nPartitions_0_reg_144(31 downto 1);

    output_r_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, output_r_ARREADY, output_addr_reg_409, empty_fu_236_p1)
    begin
        if ((output_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                output_r_ARADDR <= output_addr_reg_409;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                output_r_ARADDR <= empty_fu_236_p1(32 - 1 downto 0);
            else 
                output_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, output_r_ARREADY, zext_ln21_1_fu_267_p1)
    begin
        if ((output_r_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                output_r_ARLEN <= zext_ln21_1_fu_267_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                output_r_ARLEN <= ap_const_lv32_1;
            else 
                output_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, output_r_ARREADY)
    begin
        if ((((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((output_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            output_r_ARVALID <= ap_const_logic_1;
        else 
            output_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_r_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln21_reg_433, output_r_RVALID, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_433 = ap_const_lv1_0)) or ((output_r_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            output_r_RREADY <= ap_const_logic_1;
        else 
            output_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    output_r_blk_n_AR_assign_proc : process(m_axi_output_r_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_r_blk_n_AR <= m_axi_output_r_ARREADY;
        else 
            output_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    output_r_blk_n_R_assign_proc : process(m_axi_output_r_RVALID, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln21_reg_433)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_433 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            output_r_blk_n_R <= m_axi_output_r_RVALID;
        else 
            output_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln63_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_203),64));

    shl_ln21_fu_246_p2 <= std_logic_vector(shift_left(unsigned(n_reg_415),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    sum0s_1_fu_374_p3 <= 
        sum0s_fu_368_p2 when (icmp_ln59_reg_478(0) = '1') else 
        sum0s_0_i_reg_168;
    sum0s_fu_368_p2 <= std_logic_vector(unsigned(buff_q0) + unsigned(sum0s_0_i_reg_168));
    sum1s_1_fu_381_p3 <= 
        sum1s_0_i_reg_180 when (icmp_ln59_reg_478(0) = '1') else 
        sum1s_fu_362_p2;
    sum1s_fu_362_p2 <= std_logic_vector(unsigned(buff_q0) + unsigned(sum1s_0_i_reg_180));
    zext_ln21_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_422),32));
    zext_ln21_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln21_reg_121_pp0_iter1_reg),64));
end behav;
